name: PrepSense Full-Stack CI
on: 
  push:
    branches: [ main, experimental-work ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          if [ -f backend_gateway/requirements-dev.txt ]; then
            pip install -r backend_gateway/requirements-dev.txt
          elif [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/test_db" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=test-key-123" >> $GITHUB_ENV
          echo "SPOONACULAR_API_KEY=test-spoon-key" >> $GITHUB_ENV
          echo "TESTING=true" >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          cd backend_gateway
          # Skip migrations if alembic not set up yet
          if [ -f "alembic.ini" ]; then
            alembic upgrade head
          else
            echo "Alembic not configured - skipping migrations"
          fi

      - name: Run backend tests
        run: |
          cd backend_gateway
          python -m pytest tests/ -v --tb=short --disable-warnings

      - name: Run ingredient matching tests
        run: |
          cd backend_gateway
          python test_ingredient_matching_simple.py

  contract-tests:
    runs-on: ubuntu-latest
    needs: backend-tests
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          if [ -f backend_gateway/requirements-dev.txt ]; then
            pip install -r backend_gateway/requirements-dev.txt
          elif [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/test_db" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=test-key-123" >> $GITHUB_ENV
          echo "SPOONACULAR_API_KEY=test-spoon-key" >> $GITHUB_ENV
          echo "TESTING=true" >> $GITHUB_ENV

      - name: Run contract tests
        run: |
          cd backend_gateway
          python -m pytest tests/contracts/ -v --tb=short

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install quality tools
        run: |
          pip install black ruff bandit pip-audit

      - name: Run Black formatter check
        run: |
          # Check Python files in root
          if [ -f run_app.py ]; then
            black --check --diff run_app.py || true
          fi
          if [ -f setup.py ]; then
            black --check --diff setup.py || true
          fi
          if [ -f verify_setup.py ]; then
            black --check --diff verify_setup.py || true
          fi
          # Check backend_gateway directory
          if [ -d backend_gateway ]; then
            black --check --diff backend_gateway/
          fi

      - name: Run Ruff linter
        run: |
          # Check Python files in root
          ruff check run_app.py setup.py verify_setup.py 2>/dev/null || true
          # Check backend_gateway directory
          if [ -d backend_gateway ]; then
            ruff check backend_gateway/
          fi

      - name: Run Bandit security scan
        run: |
          cd backend_gateway
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . || true

      - name: Run pip audit
        run: |
          cd backend_gateway
          pip-audit --desc --format=json --output=pip-audit-report.json || true
          pip-audit --desc || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            backend_gateway/bandit-report.json
            backend_gateway/pip-audit-report.json

  performance-tests:
    runs-on: ubuntu-latest
    needs: backend-tests
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          if [ -f backend_gateway/requirements-dev.txt ]; then
            pip install -r backend_gateway/requirements-dev.txt
          elif [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi

      - name: Start FastAPI server
        run: |
          cd backend_gateway
          export DATABASE_URL="sqlite:///./test.db"
          export OPENAI_API_KEY="test-key-123"
          export SPOONACULAR_API_KEY="test-spoon-key"
          export TESTING="true"
          python -m uvicorn backend_gateway.app:app --host 0.0.0.0 --port 8000 &
          sleep 10
        
      - name: Run performance tests
        run: |
          cd backend_gateway
          locust -H http://localhost:8000 -u 10 -r 5 --run-time 30s --headless --only-summary

  mobile-tests:
    runs-on: macos-14
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
          cache-dependency-path: ios-app/package-lock.json

      - name: Install dependencies
        run: |
          cd ios-app
          npm ci

      - name: Run mobile unit tests
        run: |
          cd ios-app
          npm test -- --watchAll=false --coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: mobile-coverage
          path: coverage/

  e2e-tests:
    runs-on: macos-14
    needs: [backend-tests, mobile-tests]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
          cache-dependency-path: ios-app/package-lock.json

      - name: Install dependencies
        run: |
          cd ios-app
          npm ci

      - name: Install Detox
        run: |
          brew tap wix/brew
          brew install applesimutils
          npm install -g detox-cli

      - name: Build iOS app for testing
        run: |
          cd ios-app
          detox build --configuration ios.sim.debug

      - name: Run E2E tests
        run: |
          cd ios-app
          detox test --configuration ios.sim.debug --headless

  deployment-check:
    runs-on: ubuntu-latest
    needs: [backend-tests, contract-tests, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify deployment readiness
        run: |
          echo "All tests passed! Ready for deployment."
          echo "Backend tests: ✅"
          echo "Contract tests: ✅"
          echo "Code quality: ✅"

      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Backend tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Contract tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code quality checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Ready for production deployment" >> $GITHUB_STEP_SUMMARY

  notification:
    runs-on: ubuntu-latest
    needs: [backend-tests, contract-tests, mobile-tests, code-quality]
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Contract Tests | ${{ needs.contract-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Mobile Tests | ${{ needs.mobile-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY