[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
  | node_modules
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["backend_gateway", "src"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "uvicorn", "pytest", "crewai"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
show_error_codes = true
pretty = true

# FastAPI and Pydantic configuration
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "crewai.*",
    "google.*",
    "psycopg2.*",
    "anthropic.*",
    "openai.*",
    "langchain.*",
    "chromadb.*",
    "qdrant_client.*",
    "spoonacular.*",
    "redis.*",
    "playwright.*",
    "mem0ai.*",
    "elevenlabs.*",
    "cohere.*"
]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "ARG001", # unused-function-args
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "TID",   # flake8-tidy-imports
    "Q",     # flake8-quotes
    "PLE",   # pylint errors
    "PLR",   # pylint refactor
    "PLW",   # pylint warnings
]

ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "TCH001", # move import into type-checking block
    "TCH002", # move import into type-checking block
    "TCH003", # move import into type-checking block
]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "alembic",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG001", "PLR2004"]
"**/migrations/*" = ["E", "W", "F", "I", "B", "C4", "UP", "ARG001", "SIM", "TCH", "TID", "Q", "PLE", "PLR", "PLW"]
"scripts/*" = ["PLR2004"]

[tool.pytest.ini_options]
testpaths = ["tests", "backend_gateway/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--color=yes",
    "--tb=short",
    "--durations=10",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "crewai: marks tests as CrewAI tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["backend_gateway"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/alembic/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"