#!/usr/bin/env bash
# PrepSense Prepare Commit Message Hook
# Enhances commit messages with context and validation

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Only enhance commit messages for regular commits (not merges, squashes, etc.)
if [ "$COMMIT_SOURCE" = "" ]; then
    # Get the current branch name
    BRANCH_NAME=$(git symbolic-ref --short HEAD 2>/dev/null || echo "detached")
    
    # Extract ticket/issue number from branch name if present
    TICKET=""
    if [[ $BRANCH_NAME =~ (feat|fix|chore|refactor|perf|style|test|docs)/([A-Z]+-[0-9]+|[0-9]+)-.* ]]; then
        TICKET="${BASH_REMATCH[2]}"
    elif [[ $BRANCH_NAME =~ (feature|bugfix|hotfix)/([A-Z]+-[0-9]+|[0-9]+)-.* ]]; then
        TICKET="${BASH_REMATCH[2]}"
    fi
    
    # Get staged files for context
    STAGED_FILES=$(git diff --cached --name-only)
    
    # Analyze changes to suggest commit type
    COMMIT_TYPE="feat"
    SCOPE=""
    
    # Determine commit type based on changed files
    if echo "$STAGED_FILES" | grep -q "test\|spec"; then
        COMMIT_TYPE="test"
    elif echo "$STAGED_FILES" | grep -q "doc\|README\|\.md$"; then
        COMMIT_TYPE="docs"
    elif echo "$STAGED_FILES" | grep -q "package\.json\|requirements\.txt\|Pipfile\|setup\.py"; then
        COMMIT_TYPE="deps"
    elif echo "$STAGED_FILES" | grep -q "\.config\.\|\.json$\|\.yaml$\|\.yml$"; then
        COMMIT_TYPE="config"
    elif echo "$STAGED_FILES" | grep -q "backend_gateway.*\.py$"; then
        SCOPE="backend"
    elif echo "$STAGED_FILES" | grep -q "ios-app/.*\.(js|jsx|ts|tsx)$"; then
        SCOPE="frontend"
    fi
    
    # Count changes
    ADDED=$(git diff --cached --numstat | awk '{added += $1} END {print added+0}')
    DELETED=$(git diff --cached --numstat | awk '{deleted += $2} END {print deleted+0}')
    FILES_CHANGED=$(echo "$STAGED_FILES" | wc -l)
    
    # Read existing commit message
    EXISTING_MSG=$(cat "$COMMIT_MSG_FILE")
    
    # Only enhance if the message is empty or default
    if [ -z "$EXISTING_MSG" ] || [[ "$EXISTING_MSG" =~ ^#.*$ ]]; then
        # Create enhanced commit message template
        cat > "$COMMIT_MSG_FILE" << EOF
$COMMIT_TYPE$([ -n "$SCOPE" ] && echo "($SCOPE)")$([ -n "$TICKET" ] && echo " [$TICKET]"): 

# 📝 Commit Guidelines:
# Type: feat|fix|docs|style|refactor|perf|test|chore|deps|config
# Scope: backend|frontend|api|db|config|deps (optional)
# Format: type(scope): brief description
# 
# 📊 Change Summary:
# Files changed: $FILES_CHANGED
# Lines added: $ADDED
# Lines removed: $DELETED
#
# 📁 Modified Files:
$(echo "$STAGED_FILES" | head -10 | sed 's/^/# - /')
$([ $(echo "$STAGED_FILES" | wc -l) -gt 10 ] && echo "# ... and $(($(echo "$STAGED_FILES" | wc -l) - 10)) more files")
#
# 🌿 Branch: $BRANCH_NAME
$([ -n "$TICKET" ] && echo "# 🎫 Ticket: $TICKET")
#
# 💡 Tips:
# - Use present tense ("add feature" not "added feature")
# - Keep first line under 50 characters
# - Reference issues/tickets when applicable
# - Explain the "why" not just the "what"
#
# 🚫 Remove these comments before committing
EOF
    else
        # Just add context to existing message
        cat >> "$COMMIT_MSG_FILE" << EOF

# 📊 Change Summary: $FILES_CHANGED files, +$ADDED -$DELETED lines
# 🌿 Branch: $BRANCH_NAME
$([ -n "$TICKET" ] && echo "# 🎫 Ticket: $TICKET")
EOF
    fi
fi

# Validate commit message format (basic check)
if [ "$COMMIT_SOURCE" = "message" ] || [ "$COMMIT_SOURCE" = "template" ]; then
    MSG=$(head -n1 "$COMMIT_MSG_FILE")
    
    # Check for conventional commit format
    if ! echo "$MSG" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|chore|deps|config)(\(.+\))?: .+"; then
        # If it doesn't match, provide a warning but don't fail
        echo -e "${YELLOW}⚠️ Commit message doesn't follow conventional format${NC}" >&2
        echo -e "${YELLOW}Recommended: type(scope): description${NC}" >&2
        echo -e "${YELLOW}Example: feat(backend): add user authentication${NC}" >&2
    fi
    
    # Check message length
    if [ ${#MSG} -gt 72 ]; then
        echo -e "${YELLOW}⚠️ Commit message first line is longer than 72 characters${NC}" >&2
    fi
fi

exit 0