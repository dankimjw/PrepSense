{
  "openapi": "3.1.0",
  "info": {
    "title": "PrepSense Gateway API",
    "description": "\nYour Smart Pantry Assistant - AI-powered recipe recommendations and pantry management\n\n## Features\n\n- **AI-Powered Recipe Recommendations**: Get personalized recipe suggestions based on your pantry contents\n- **Smart Pantry Management**: Track inventory with expiration dates and automated notifications\n- **Receipt OCR Processing**: Automatically extract items from receipts using advanced AI\n- **Multi-Agent AI System**: CrewAI-powered agents for comprehensive food management\n- **Real-time Monitoring**: Comprehensive observability with Sentry, Prometheus, and structured logging\n\n## Authentication\n\nThis API uses JWT Bearer tokens for authentication. Include the token in the Authorization header:\n\n```\nAuthorization: Bearer <your-jwt-token>\n```\n\nFor service-to-service communication, use API key authentication:\n\n```\nX-API-Key: <your-api-key>\n```\n\n## Rate Limiting\n\nAPI endpoints are rate limited to ensure fair usage:\n- Authentication endpoints: 5 requests per minute\n- General endpoints: 100 requests per minute\n- File upload endpoints: 10 requests per minute\n\n## Error Handling\n\nAll API errors follow a consistent format with appropriate HTTP status codes.\nEach error response includes:\n- `detail`: Human-readable error message\n- `error_code`: Machine-readable error identifier\n- `timestamp`: ISO 8601 timestamp of the error\n- `incident_id`: Unique identifier for tracking (server errors only)\n\n## Monitoring and Observability\n\nThis API includes comprehensive monitoring:\n- Health check endpoint: `/api/v1/health`\n- Metrics endpoint: `/metrics` (Prometheus format)\n- Status dashboard: `/monitoring/health`\n\n## Support\n\nFor questions or issues, please contact the development team or visit our GitHub repository.\n    ",
    "version": "1.4.0",
    "contact": {
      "name": "PrepSense Development Team",
      "email": "dev@prepsense.com",
      "url": "https://github.com/dankimjw/PrepSense"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8001",
      "description": "Development server"
    },
    {
      "url": "http://localhost:8002",
      "description": "Testing server"
    },
    {
      "url": "https://api.prepsense.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/api/v1/users/{user_id}/profile": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Read User Profile",
        "description": "Get a specific user's full profile. Authentication removed for prototype.",
        "operationId": "read_user_profile_api_v1_users__user_id__profile_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/token": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Login For Access Token",
        "description": "OAuth2 compatible token login, get an access token for future requests",
        "operationId": "login_for_access_token_api_v1_token_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_for_access_token_api_v1_token_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Read Users Me",
        "description": "Get current user. This endpoint implies authentication.",
        "operationId": "read_users_me_api_v1_users_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOptional": []
          }
        ]
      }
    },
    "/api/v1/users/": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "List Users",
        "description": "List all users (admin only)",
        "operationId": "list_users_api_v1_users__get",
        "security": [
          {
            "OAuth2PasswordBearerOptional": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  },
                  "title": "Response List Users Api V1 Users  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Read User",
        "description": "Get a specific user by ID",
        "operationId": "read_user_api_v1_users__user_id__get",
        "security": [
          {
            "OAuth2PasswordBearerOptional": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/images/upload": {
      "post": {
        "tags": [
          "images"
        ],
        "summary": "Upload Image",
        "operationId": "upload_image_api_v1_images_upload_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_image_api_v1_images_upload_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "additionalProperties": true,
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "type": "object",
                  "title": "Response Upload Image Api V1 Images Upload Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/images/save-detected-items": {
      "post": {
        "tags": [
          "images"
        ],
        "summary": "Save Detected Items",
        "description": "Save detected food items from vision service to the user's pantry in BigQuery.\n\nThis endpoint properly handles the relationship between pantry_items and products tables,\nensuring each item gets unique IDs that are properly incremented.\n\nArgs:\n    request: SaveItemsRequest containing items and user_id\n    pantry_manager: The pantry item manager service\n\nReturns:\n    A status message and details of saved items",
        "operationId": "save_detected_items_api_v1_images_save_detected_items_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveItemsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Save Detected Items Api V1 Images Save Detected Items Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/images/cleanup-detected-items": {
      "delete": {
        "tags": [
          "images"
        ],
        "summary": "Cleanup Detected Items",
        "description": "Cleanup items that were recently added via vision detection.\n\nArgs:\n    request: CleanupRequest containing user_id and optional hours_ago\n    pantry_manager: The pantry item manager service\n\nReturns:\n    A status message and count of deleted items",
        "operationId": "cleanup_detected_items_api_v1_images_cleanup_detected_items_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CleanupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Cleanup Detected Items Api V1 Images Cleanup Detected Items Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/images/debug-items/{user_id}": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Debug User Items",
        "description": "Debug endpoint to check items and their timestamps.",
        "operationId": "debug_user_items_api_v1_images_debug_items__user_id__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Debug User Items Api V1 Images Debug Items  User Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/images/item/{pantry_item_id}": {
      "delete": {
        "tags": [
          "images"
        ],
        "summary": "Delete Single Item",
        "description": "Delete a single pantry item by its ID.\n\nArgs:\n    pantry_item_id: The ID of the pantry item to delete\n    user_id: The user ID for verification (defaults to 111)\n    pantry_manager: The pantry item manager service\n\nReturns:\n    A status message with deletion result",
        "operationId": "delete_single_item_api_v1_images_item__pantry_item_id__delete",
        "parameters": [
          {
            "name": "pantry_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Pantry Item Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 111,
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Delete Single Item Api V1 Images Item  Pantry Item Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/images/scan-items-vision": {
      "post": {
        "tags": [
          "images"
        ],
        "summary": "Scan Items Vision",
        "description": "Scan items using the original vision service (gpt-4o).\nThis endpoint provides OCR-compatible interface but uses the more accurate vision service.",
        "operationId": "scan_items_vision_api_v1_images_scan_items_vision_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Scan Items Vision Api V1 Images Scan Items Vision Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pantry/user/{user_id}/items": {
      "get": {
        "tags": [
          "pantry",
          "Pantry"
        ],
        "summary": "Get User's Pantry Items",
        "description": "Get all pantry items for a specific user from the user_pantry_full view.\n\nArgs:\n    user_id: The ID of the user whose pantry items to retrieve\n    pantry_service: The pantry service instance\n\nReturns:\n    List of UserPantryItem objects containing all pantry details\n\nRaises:\n    HTTPException: If there's an error retrieving items",
        "operationId": "get_user_pantry_items_api_v1_pantry_user__user_id__items_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPantryItem"
                  },
                  "title": "Response Get User Pantry Items Api V1 Pantry User  User Id  Items Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "pantry",
          "Pantry"
        ],
        "summary": "Add Item to Specific User's Pantry",
        "description": "Adds a new item to the pantry for a specific user.\n\nArgs:\n    user_id: The ID of the user to add the item for\n    item_data: The pantry item data\n    pantry_service: The pantry service instance\n\nReturns:\n    The newly created pantry item",
        "operationId": "add_pantry_item_for_specific_user_api_v1_pantry_user__user_id__items_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PantryItemCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Add Pantry Item For Specific User Api V1 Pantry User  User Id  Items Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "pantry",
          "Pantry"
        ],
        "summary": "Delete User Pantry Items",
        "description": "Delete pantry items for a specific user.\n\nFor demo purposes, this endpoint allows removing recently added items to prevent\naccumulation of duplicate items when testing vision detection and item adding features.\n\nArgs:\n    user_id: The ID of the user whose pantry items to delete (defaults to 111 for demo)\n    hours_ago: If provided, only delete items added within the last X hours\n    delete_all: If True, delete all items for this user (overrides hours_ago)\n    pantry_service: The pantry service instance\n\nReturns:\n    A status message and count of deleted items",
        "operationId": "delete_user_pantry_items_api_v1_pantry_user__user_id__items_delete",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          },
          {
            "name": "hours_ago",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Hours Ago"
            }
          },
          {
            "name": "delete_all",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Delete All"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Delete User Pantry Items Api V1 Pantry User  User Id  Items Delete"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pantry/items": {
      "post": {
        "tags": [
          "pantry",
          "Pantry"
        ],
        "summary": "Add Item to User's Pantry",
        "description": "Adds a new item to the pantry for a hardcoded user (ID 111).\nThe `PantryService.add_pantry_item` method is currently a placeholder\nand will need full implementation for actual database insertion.",
        "operationId": "add_pantry_item_for_user_api_v1_pantry_items_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PantryItemCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Add Pantry Item For User Api V1 Pantry Items Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pantry/user/{user_id}/full": {
      "get": {
        "tags": [
          "pantry",
          "Pantry"
        ],
        "summary": "Get User Pantry Full",
        "description": "Get the user's full pantry view ordered by expiration date.\nUses the user_pantry_full table which likely contains joined data.",
        "operationId": "get_user_pantry_full_api_v1_pantry_user__user_id__full_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response Get User Pantry Full Api V1 Pantry User  User Id  Full Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pantry/items/{item_id}": {
      "put": {
        "tags": [
          "pantry",
          "Pantry"
        ],
        "summary": "Update Pantry Item",
        "description": "Update an existing pantry item.\n\nArgs:\n    item_id: The ID of the pantry item to update\n    item_data: The updated pantry item data\n    pantry_service: The pantry service instance\n\nReturns:\n    The updated pantry item\n\nRaises:\n    HTTPException: If the item is not found or update fails",
        "operationId": "update_pantry_item_api_v1_pantry_items__item_id__put",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Item Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PantryItemCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Update Pantry Item Api V1 Pantry Items  Item Id  Put"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "pantry",
          "Pantry"
        ],
        "summary": "Delete Single Pantry Item",
        "description": "Delete a single pantry item by ID.\n\nArgs:\n    item_id: The ID of the pantry item to delete\n    pantry_service: The pantry service instance\n\nReturns:\n    A status message confirming deletion\n\nRaises:\n    HTTPException: If the item is not found or deletion fails",
        "operationId": "delete_pantry_item_api_v1_pantry_items__item_id__delete",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Delete Pantry Item Api V1 Pantry Items  Item Id  Delete"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pantry/items/{item_id}/consume": {
      "patch": {
        "tags": [
          "pantry",
          "Pantry"
        ],
        "summary": "Update Item Consumption",
        "description": "Update the consumption of a pantry item.\n\nArgs:\n    item_id: The ID of the pantry item to update\n    consumption_data: The consumption data (new quantity and used quantity)\n    pantry_service: The pantry service instance\n\nReturns:\n    Success message with updated quantities\n\nRaises:\n    HTTPException: If the item is not found or update fails",
        "operationId": "consume_pantry_item_api_v1_pantry_items__item_id__consume_patch",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Item Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PantryItemConsumption"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Consume Pantry Item Api V1 Pantry Items  Item Id  Consume Patch"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pantry/recipe/complete": {
      "post": {
        "tags": [
          "pantry",
          "Pantry"
        ],
        "summary": "Complete Recipe and Subtract Ingredients",
        "description": "Complete a recipe and subtract the used ingredients from the user's pantry.\n\nArgs:\n    request: The recipe completion request with user ID, recipe name, and ingredients\n    pantry_service: The pantry service instance\n    db_service: The BigQuery service instance\n\nReturns:\n    Success message with details about updated items\n\nRaises:\n    HTTPException: If there's an error updating the pantry",
        "operationId": "complete_recipe_api_v1_pantry_recipe_complete_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipeCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Complete Recipe Api V1 Pantry Recipe Complete Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pantry/revert-changes": {
      "post": {
        "tags": [
          "pantry",
          "Pantry"
        ],
        "summary": "Revert Recent Pantry Changes",
        "description": "Revert recent pantry changes including recipe subtractions.\n\nThis enhanced version can:\n- Revert items added within X hours/minutes\n- Revert quantity changes from recipe completions\n- Selectively revert only certain types of changes\n\nArgs:\n    user_id: The user whose changes to revert\n    hours_ago: Revert changes from the last X hours\n    minutes_ago: Revert changes from the last X minutes (overrides hours_ago)\n    include_recipe_changes: If True, revert recipe-related quantity changes\n    include_additions: If True, revert newly added items\n\nReturns:\n    Summary of reverted changes",
        "operationId": "revert_pantry_changes_api_v1_pantry_revert_changes_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 111,
              "title": "User Id"
            }
          },
          {
            "name": "hours_ago",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Hours Ago"
            }
          },
          {
            "name": "minutes_ago",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Minutes Ago"
            }
          },
          {
            "name": "include_recipe_changes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Include Recipe Changes"
            }
          },
          {
            "name": "include_additions",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Include Additions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Revert Pantry Changes Api V1 Pantry Revert Changes Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pantry/configure-mock-recipe-completion": {
      "post": {
        "tags": [
          "pantry",
          "Pantry"
        ],
        "summary": "Toggle mock data for recipe completion",
        "description": "Toggle the use of mock data for recipe completion",
        "operationId": "configure_mock_recipe_completion_api_v1_pantry_configure_mock_recipe_completion_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MockRecipeCompletionConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pantry/cleanup-trader-joes-items": {
      "delete": {
        "tags": [
          "pantry",
          "Pantry"
        ],
        "summary": "Remove all Trader Joe's items from pantry",
        "description": "Remove all Trader Joe's items from the user's pantry.\nThis helps clean up test data that may have been accidentally saved.",
        "operationId": "cleanup_trader_joes_items_api_v1_pantry_cleanup_trader_joes_items_delete",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 111,
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/message": {
      "post": {
        "tags": [
          "recipes",
          "Chat"
        ],
        "summary": "Send Message",
        "description": "Send a message to the AI assistant and get recipe recommendations.",
        "operationId": "send_message_api_v1_chat_message_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/generate-recipe-image": {
      "post": {
        "tags": [
          "recipes",
          "Chat"
        ],
        "summary": "Generate Recipe Image",
        "description": "Get an image for a recipe using either Unsplash (fast) or DALL-E 2 (generated).\n\nArgs:\n    request: The image generation request with recipe name, style, and use_generated flag\n\nReturns:\n    ImageGenerationResponse with the image URL",
        "operationId": "generate_recipe_image_api_v1_chat_generate_recipe_image_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageGenerationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/recipes/search/by-ingredients": {
      "post": {
        "tags": [
          "recipes",
          "Spoonacular Recipes"
        ],
        "summary": "Search recipes by ingredients",
        "description": "Search for recipes based on a list of ingredients",
        "operationId": "search_recipes_by_ingredients_api_v1_recipes_search_by_ingredients_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipeSearchByIngredientsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response Search Recipes By Ingredients Api V1 Recipes Search By Ingredients Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/recipes/search/complex": {
      "post": {
        "tags": [
          "recipes",
          "Spoonacular Recipes"
        ],
        "summary": "Complex recipe search",
        "description": "Complex recipe search with multiple filters",
        "operationId": "search_recipes_complex_api_v1_recipes_search_complex_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipeSearchComplexRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Search Recipes Complex Api V1 Recipes Search Complex Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/recipes/recipe/{recipe_id}": {
      "get": {
        "tags": [
          "recipes",
          "Spoonacular Recipes"
        ],
        "summary": "Get recipe information",
        "description": "Get detailed information about a specific recipe.\nThis endpoint uses Spoonacular images when available, with local backups.",
        "operationId": "get_recipe_information_api_v1_recipes_recipe__recipe_id__get",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          },
          {
            "name": "include_nutrition",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include nutrition information",
              "default": true,
              "title": "Include Nutrition"
            },
            "description": "Include nutrition information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Recipe Information Api V1 Recipes Recipe  Recipe Id  Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/recipes/random": {
      "get": {
        "tags": [
          "recipes",
          "Spoonacular Recipes"
        ],
        "summary": "Get random recipes",
        "description": "Get random recipes, optionally filtered by tags with caching for performance",
        "operationId": "get_random_recipes_api_v1_recipes_random_get",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of random recipes",
              "default": 10,
              "title": "Number"
            },
            "description": "Number of random recipes"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Comma-separated tags to filter by",
              "title": "Tags"
            },
            "description": "Comma-separated tags to filter by"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Random Recipes Api V1 Recipes Random Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/recipes/search/from-pantry": {
      "post": {
        "tags": [
          "recipes",
          "Spoonacular Recipes"
        ],
        "summary": "Find recipes using pantry items",
        "description": "Find recipes based on user's pantry items, prioritizing expiring items",
        "operationId": "search_recipes_from_pantry_api_v1_recipes_search_from_pantry_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipeFromPantryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Search Recipes From Pantry Api V1 Recipes Search From Pantry Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/recipe-consumption/cook": {
      "post": {
        "tags": [
          "recipes",
          "Recipe Consumption"
        ],
        "summary": "Cook a recipe and update pantry",
        "description": "Cook a recipe and subtract ingredients from pantry\n\nThis endpoint:\n1. Validates that the user has sufficient ingredients\n2. Subtracts the used quantities from pantry items\n3. Records the cooking event\n4. Returns updated pantry state",
        "operationId": "cook_recipe_api_v1_recipe_consumption_cook_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CookRecipeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Cook Recipe Api V1 Recipe Consumption Cook Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/recipe-consumption/check-ingredients": {
      "post": {
        "tags": [
          "recipes",
          "Recipe Consumption"
        ],
        "summary": "Check if user has sufficient ingredients",
        "description": "Check if user has sufficient ingredients to cook a recipe\n\nReturns data in format expected by QuickCompleteModal frontend",
        "operationId": "check_ingredients_availability_api_v1_recipe_consumption_check_ingredients_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngredientCheckRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Check Ingredients Availability Api V1 Recipe Consumption Check Ingredients Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/recipe-consumption/quick-complete": {
      "post": {
        "tags": [
          "recipes",
          "Recipe Consumption"
        ],
        "summary": "Quick complete a recipe",
        "description": "Quick complete a recipe by updating pantry quantities based on ingredient selections",
        "operationId": "quick_complete_recipe_api_v1_recipe_consumption_quick_complete_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuickCompleteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Quick Complete Recipe Api V1 Recipe Consumption Quick Complete Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user-recipes": {
      "post": {
        "tags": [
          "recipes",
          "User Recipes"
        ],
        "summary": "Save a recipe to user's collection",
        "description": "Save a recipe to the user's collection",
        "operationId": "save_user_recipe_api_v1_user_recipes_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveRecipeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Save User Recipe Api V1 User Recipes Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "recipes",
          "User Recipes"
        ],
        "summary": "Get user's saved recipes (My Recipes)",
        "description": "Get user's saved recipes with optional filters. By default, excludes external recipes (Spoonacular) to keep My Recipes clean.",
        "operationId": "get_user_recipes_api_v1_user_recipes_get",
        "parameters": [
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by source",
              "title": "Source"
            },
            "description": "Filter by source"
          },
          {
            "name": "is_favorite",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by favorite status",
              "title": "Is Favorite"
            },
            "description": "Filter by favorite status"
          },
          {
            "name": "rating",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by rating",
              "title": "Rating"
            },
            "description": "Filter by rating"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status: 'saved' or 'cooked'",
              "title": "Status"
            },
            "description": "Filter by status: 'saved' or 'cooked'"
          },
          {
            "name": "demo_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter to show only demo recipes",
              "default": false,
              "title": "Demo Only"
            },
            "description": "Filter to show only demo recipes"
          },
          {
            "name": "include_external",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include external recipes (Spoonacular, etc.) - defaults to False for My Recipes",
              "default": false,
              "title": "Include External"
            },
            "description": "Include external recipes (Spoonacular, etc.) - defaults to False for My Recipes"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Maximum number of recipes to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of recipes to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of recipes to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of recipes to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response Get User Recipes Api V1 User Recipes Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user-recipes/bookmarked-external": {
      "get": {
        "tags": [
          "recipes",
          "User Recipes"
        ],
        "summary": "Get user's bookmarked external recipes",
        "description": "Get user's bookmarked external recipes (Spoonacular, etc.) - separate from My Recipes",
        "operationId": "get_bookmarked_external_recipes_api_v1_user_recipes_bookmarked_external_get",
        "parameters": [
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "External source filter - defaults to 'spoonacular'",
              "default": "spoonacular",
              "title": "Source"
            },
            "description": "External source filter - defaults to 'spoonacular'"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Maximum number of recipes to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of recipes to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of recipes to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of recipes to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response Get Bookmarked External Recipes Api V1 User Recipes Bookmarked External Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user-recipes/stats": {
      "get": {
        "tags": [
          "recipes",
          "User Recipes"
        ],
        "summary": "Get user's recipe statistics",
        "description": "Get statistics about user's saved recipes (excludes external recipes from main counts)",
        "operationId": "get_recipe_stats_api_v1_user_recipes_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Recipe Stats Api V1 User Recipes Stats Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/v1/user-recipes/{recipe_id}/rating": {
      "put": {
        "tags": [
          "recipes",
          "User Recipes"
        ],
        "summary": "Update recipe rating",
        "description": "Update the rating for a saved recipe",
        "operationId": "update_recipe_rating_api_v1_user_recipes__recipe_id__rating_put",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRatingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Update Recipe Rating Api V1 User Recipes  Recipe Id  Rating Put"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user-recipes/{recipe_id}/favorite": {
      "put": {
        "tags": [
          "recipes",
          "User Recipes"
        ],
        "summary": "Toggle recipe favorite status",
        "description": "Toggle the favorite status for a saved recipe",
        "operationId": "toggle_recipe_favorite_api_v1_user_recipes__recipe_id__favorite_put",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Toggle Recipe Favorite Api V1 User Recipes  Recipe Id  Favorite Put"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user-recipes/{recipe_id}/mark-cooked": {
      "put": {
        "tags": [
          "recipes",
          "User Recipes"
        ],
        "summary": "Mark recipe as cooked",
        "description": "Mark a saved recipe as cooked (auto-promotion from saved to cooked status)",
        "operationId": "mark_recipe_as_cooked_api_v1_user_recipes__recipe_id__mark_cooked_put",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Recipe Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Mark Recipe As Cooked Api V1 User Recipes  Recipe Id  Mark Cooked Put"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user-recipes/{recipe_id}": {
      "delete": {
        "tags": [
          "recipes",
          "User Recipes"
        ],
        "summary": "Delete a saved recipe",
        "description": "Delete a recipe from user's collection",
        "operationId": "delete_user_recipe_api_v1_user_recipes__recipe_id__delete",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Delete User Recipe Api V1 User Recipes  Recipe Id  Delete"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "recipes",
          "User Recipes"
        ],
        "summary": "Get a specific saved recipe",
        "description": "Get a specific recipe from user's collection",
        "operationId": "get_user_recipe_api_v1_user_recipes__recipe_id__get",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get User Recipe Api V1 User Recipes  Recipe Id  Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/shopping-list/user/{user_id}/items": {
      "get": {
        "tags": [
          "pantry",
          "Shopping List"
        ],
        "summary": "Get Shopping List",
        "description": "Get all items in the user's shopping list from database.",
        "operationId": "get_shopping_list_api_v1_shopping_list_user__user_id__items_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response Get Shopping List Api V1 Shopping List User  User Id  Items Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/shopping-list/add-items": {
      "post": {
        "tags": [
          "pantry",
          "Shopping List"
        ],
        "summary": "Add Items to Shopping List",
        "description": "Add items to the user's shopping list in database.",
        "operationId": "add_shopping_list_items_api_v1_shopping_list_add_items_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddItemsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Add Shopping List Items Api V1 Shopping List Add Items Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/shopping-list/remove-items": {
      "post": {
        "tags": [
          "pantry",
          "Shopping List"
        ],
        "summary": "Remove Items from Shopping List",
        "description": "Remove items from the user's shopping list.",
        "operationId": "remove_shopping_list_items_api_v1_shopping_list_remove_items_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveItemsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Remove Shopping List Items Api V1 Shopping List Remove Items Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/shopping-list/items/{item_id}": {
      "patch": {
        "tags": [
          "pantry",
          "Shopping List"
        ],
        "summary": "Update Shopping List Item",
        "description": "Update a specific shopping list item (e.g., mark as checked).",
        "operationId": "update_shopping_list_item_api_v1_shopping_list_items__item_id__patch",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Update Shopping List Item Api V1 Shopping List Items  Item Id  Patch"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/shopping-list/user/{user_id}/clear": {
      "delete": {
        "tags": [
          "pantry",
          "Shopping List"
        ],
        "summary": "Clear Shopping List",
        "description": "Clear all items from the user's shopping list.",
        "operationId": "clear_shopping_list_api_v1_shopping_list_user__user_id__clear_delete",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Clear Shopping List Api V1 Shopping List User  User Id  Clear Delete"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/shopping-list/user/{user_id}/summary": {
      "get": {
        "tags": [
          "pantry",
          "Shopping List"
        ],
        "summary": "Get Shopping List Summary",
        "description": "Get summary statistics for user's shopping list.",
        "operationId": "get_shopping_list_summary_api_v1_shopping_list_user__user_id__summary_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Shopping List Summary Api V1 Shopping List User  User Id  Summary Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/demo/recipes": {
      "get": {
        "tags": [
          "admin",
          "Demo"
        ],
        "summary": "Get demo recipes for testing",
        "description": "Returns demo recipes formatted for the chat interface.\nThese recipes are designed to test various unit conversion scenarios.",
        "operationId": "get_demo_recipes_api_v1_demo_recipes_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Demo Recipes Api V1 Demo Recipes Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/v1/demo/pantry-status": {
      "get": {
        "tags": [
          "admin",
          "Demo"
        ],
        "summary": "Get current pantry quantities for demo",
        "description": "Get current pantry quantities to verify ingredient subtraction",
        "operationId": "get_pantry_status_api_v1_demo_pantry_status_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 111,
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Pantry Status Api V1 Demo Pantry Status Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/demo/reset-demo": {
      "post": {
        "tags": [
          "admin",
          "Demo"
        ],
        "summary": "Reset demo data to original values",
        "description": "Reset all demo pantry items to their original quantities (legacy endpoint)",
        "operationId": "reset_demo_data_old_api_v1_demo_reset_demo_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Reset Demo Data Old Api V1 Demo Reset Demo Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/v1/demo/reset-data": {
      "post": {
        "tags": [
          "admin",
          "Demo"
        ],
        "summary": "Reset demo data (new endpoint)",
        "description": "Reset demo pantry items and recipes to default state",
        "operationId": "reset_demo_data_api_v1_demo_reset_data_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Reset Demo Data Api V1 Demo Reset Data Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/v1/demo/test-subtraction": {
      "post": {
        "tags": [
          "admin",
          "Demo"
        ],
        "summary": "Run ingredient subtraction tests",
        "description": "Run automated tests for ingredient subtraction",
        "operationId": "run_subtraction_tests_api_v1_demo_test_subtraction_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Run Subtraction Tests Api V1 Demo Test Subtraction Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/v1/cooking-history/trends": {
      "get": {
        "tags": [
          "recipes",
          "Cooking History"
        ],
        "summary": "Get cooking trends data",
        "description": "Get cooking trends data from pantry history\n\nReturns cooking frequency and popular recipes based on pantry usage",
        "operationId": "get_cooking_trends_api_v1_cooking_history_trends_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "User ID",
              "default": 111,
              "title": "User Id"
            },
            "description": "User ID"
          },
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of days to look back",
              "default": 30,
              "title": "Days"
            },
            "description": "Number of days to look back"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Cooking Trends Api V1 Cooking History Trends Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cooking-history/calendar": {
      "get": {
        "tags": [
          "recipes",
          "Cooking History"
        ],
        "summary": "Get cooking calendar data",
        "description": "Get cooking calendar data for a specific month",
        "operationId": "get_cooking_calendar_api_v1_cooking_history_calendar_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "User ID",
              "default": 111,
              "title": "User Id"
            },
            "description": "User ID"
          },
          {
            "name": "year",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Year",
              "default": 2025,
              "title": "Year"
            },
            "description": "Year"
          },
          {
            "name": "month",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Month",
              "default": 8,
              "title": "Month"
            },
            "description": "Month"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Cooking Calendar Api V1 Cooking History Calendar Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/units/": {
      "get": {
        "tags": [
          "pantry",
          "units"
        ],
        "summary": "Get Units",
        "description": "Get all available units, optionally filtered by category",
        "operationId": "get_units_api_v1_units__get",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by unit category (mass, volume, count)",
              "title": "Category"
            },
            "description": "Filter by unit category (mass, volume, count)"
          },
          {
            "name": "metric_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Return only metric units",
              "default": false,
              "title": "Metric Only"
            },
            "description": "Return only metric units"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Unit"
                  },
                  "title": "Response Get Units Api V1 Units  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/units/food-category-rules/{category}": {
      "get": {
        "tags": [
          "pantry",
          "units"
        ],
        "summary": "Get Food Category Rules",
        "description": "Get unit rules for a specific food category",
        "operationId": "get_food_category_rules_api_v1_units_food_category_rules__category__get",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Category"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FoodCategoryRules"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/units/validate-conversion": {
      "post": {
        "tags": [
          "pantry",
          "units"
        ],
        "summary": "Validate Unit Conversion",
        "description": "Check if units can be converted and calculate conversion factor",
        "operationId": "validate_unit_conversion_api_v1_units_validate_conversion_post",
        "parameters": [
          {
            "name": "from_unit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Source unit ID",
              "title": "From Unit"
            },
            "description": "Source unit ID"
          },
          {
            "name": "to_unit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Target unit ID",
              "title": "To Unit"
            },
            "description": "Target unit ID"
          },
          {
            "name": "quantity",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Quantity to convert",
              "default": 1.0,
              "title": "Quantity"
            },
            "description": "Quantity to convert"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitConversion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/units/suggest-unit": {
      "get": {
        "tags": [
          "pantry",
          "units"
        ],
        "summary": "Suggest Unit For Item",
        "description": "Suggest the best unit for a specific item based on its name and category",
        "operationId": "suggest_unit_for_item_api_v1_units_suggest_unit_get",
        "parameters": [
          {
            "name": "item_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the item",
              "title": "Item Name"
            },
            "description": "Name of the item"
          },
          {
            "name": "food_category",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Food category of the item",
              "title": "Food Category"
            },
            "description": "Food category of the item"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ocr/scan-items": {
      "post": {
        "tags": [
          "ocr",
          "OCR"
        ],
        "summary": "Scan Items",
        "description": "Scan items from an uploaded image using OpenAI Vision API or mock data.\nReturns structured data about identified pantry items including proper categorization.",
        "operationId": "scan_items_api_v1_ocr_scan_items_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_scan_items_api_v1_ocr_scan_items_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OCRResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ocr/scan-receipt": {
      "post": {
        "tags": [
          "ocr",
          "OCR"
        ],
        "summary": "Scan Receipt",
        "description": "Scan receipt from base64 image data using OpenAI Vision API or mock data.\nThis endpoint accepts JSON with image_base64 to match frontend expectations.",
        "operationId": "scan_receipt_api_v1_ocr_scan_receipt_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiptScanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OCRResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ocr/scan-barcode": {
      "post": {
        "tags": [
          "ocr",
          "OCR"
        ],
        "summary": "Scan Barcode",
        "description": "Scan barcode from an uploaded image using OpenAI Vision API.",
        "operationId": "scan_barcode_api_v1_ocr_scan_barcode_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_scan_barcode_api_v1_ocr_scan_barcode_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BarcodeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ocr/debug/status": {
      "get": {
        "tags": [
          "ocr",
          "OCR"
        ],
        "summary": "Get Debug Status",
        "description": "Get comprehensive OCR pipeline status for debugging wrong item detection.",
        "operationId": "get_debug_status_api_v1_ocr_debug_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebugStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ocr/debug/recent-detections": {
      "get": {
        "tags": [
          "ocr",
          "OCR"
        ],
        "summary": "Get Recent Detections",
        "description": "Get recent detection results for debugging.",
        "operationId": "get_recent_detections_api_v1_ocr_debug_recent_detections_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/ocr/debug/clear-cache": {
      "post": {
        "tags": [
          "ocr",
          "OCR"
        ],
        "summary": "Clear Ocr Cache",
        "description": "Clear OCR-related cache entries to force fresh detection.",
        "operationId": "clear_ocr_cache_api_v1_ocr_debug_clear_cache_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/ocr/debug/test-detection": {
      "post": {
        "tags": [
          "ocr",
          "OCR"
        ],
        "summary": "Test Detection Pipeline",
        "description": "Test the detection pipeline with various scenarios.",
        "operationId": "test_detection_pipeline_api_v1_ocr_debug_test_detection_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/ocr/debug/force-fresh-detection": {
      "post": {
        "tags": [
          "ocr",
          "OCR"
        ],
        "summary": "Force Fresh Detection",
        "description": "Force fresh detection by bypassing cache and mock data.",
        "operationId": "force_fresh_detection_api_v1_ocr_debug_force_fresh_detection_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_force_fresh_detection_api_v1_ocr_debug_force_fresh_detection_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ocr/configure-mock-data": {
      "post": {
        "tags": [
          "ocr",
          "OCR"
        ],
        "summary": "Toggle mock data usage",
        "description": "Toggle the use of mock data for OCR endpoints",
        "operationId": "configure_mock_data_api_v1_ocr_configure_mock_data_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MockDataConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ocr/mock-data-status": {
      "get": {
        "tags": [
          "ocr",
          "OCR"
        ],
        "summary": "Get current mock data status",
        "description": "Get the current status of mock data status",
        "operationId": "get_mock_data_status_api_v1_ocr_mock_data_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/stats/comprehensive": {
      "get": {
        "tags": [
          "monitoring",
          "Statistics"
        ],
        "summary": "Get comprehensive user statistics",
        "description": "Get comprehensive statistics including pantry, recipes, and sustainability metrics",
        "operationId": "get_comprehensive_stats_api_v1_stats_comprehensive_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "User ID",
              "default": 111,
              "title": "User Id"
            },
            "description": "User ID"
          },
          {
            "name": "timeframe",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Timeframe: week, month, year",
              "default": "month",
              "title": "Timeframe"
            },
            "description": "Timeframe: week, month, year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Comprehensive Stats Api V1 Stats Comprehensive Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/stats/milestones": {
      "get": {
        "tags": [
          "monitoring",
          "Statistics"
        ],
        "summary": "Get user milestones and achievements",
        "description": "Get user milestones and achievements",
        "operationId": "get_user_milestones_api_v1_stats_milestones_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "User ID",
              "default": 111,
              "title": "User Id"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get User Milestones Api V1 Stats Milestones Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/run-migration": {
      "post": {
        "tags": [
          "admin",
          "admin"
        ],
        "summary": "Run Migration",
        "description": "Run a SQL migration file.\n\nWARNING: This endpoint should be secured in production!\nOnly allow authorized administrators to run migrations.",
        "operationId": "run_migration_api_v1_admin_run_migration_post",
        "parameters": [
          {
            "name": "migration_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Migration Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Run Migration Api V1 Admin Run Migration Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/check-tables": {
      "get": {
        "tags": [
          "admin",
          "admin"
        ],
        "summary": "Check Tables",
        "description": "Check if tables exist and get row counts.",
        "operationId": "check_tables_api_v1_admin_check_tables_get",
        "parameters": [
          {
            "name": "table_prefix",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "usda",
              "title": "Table Prefix"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Check Tables Api V1 Admin Check Tables Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/nutrition/log-meal": {
      "post": {
        "tags": [
          "pantry",
          "nutrition"
        ],
        "summary": "Log Meal",
        "description": "Log a meal for dietary tracking.",
        "operationId": "log_meal_api_v1_nutrition_log_meal_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogMealRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogMealResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/nutrition/gaps": {
      "get": {
        "tags": [
          "pantry",
          "nutrition"
        ],
        "summary": "Get Nutrient Gaps",
        "description": "Get nutrient gap analysis for a user.",
        "operationId": "get_nutrient_gaps_api_v1_nutrition_gaps_get",
        "parameters": [
          {
            "name": "analysis_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Date for analysis (defaults to today)",
              "title": "Analysis Date"
            },
            "description": "Date for analysis (defaults to today)"
          },
          {
            "name": "period_days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of days to analyze (1 = single day, 7 = weekly)",
              "default": 1,
              "title": "Period Days"
            },
            "description": "Number of days to analyze (1 = single day, 7 = weekly)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNutrientGapsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/nutrition/recipe-recommendations": {
      "post": {
        "tags": [
          "pantry",
          "nutrition"
        ],
        "summary": "Get Nutrient Aware Recipes",
        "description": "Get recipe recommendations with nutrient gap awareness.",
        "operationId": "get_nutrient_aware_recipes_api_v1_nutrition_recipe_recommendations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NutrientAwareRecipeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/nutrition/daily-intake/{target_date}": {
      "get": {
        "tags": [
          "pantry",
          "nutrition"
        ],
        "summary": "Get Daily Intake",
        "description": "Get daily dietary intake for a specific date.",
        "operationId": "get_daily_intake_api_v1_nutrition_daily_intake__target_date__get",
        "parameters": [
          {
            "name": "target_date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "Target Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/nutrition/analyze-food": {
      "post": {
        "tags": [
          "pantry",
          "nutrition"
        ],
        "summary": "Analyze Food",
        "description": "Analyze nutritional content of a food item.",
        "operationId": "analyze_food_api_v1_nutrition_analyze_food_post",
        "parameters": [
          {
            "name": "food_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Food Name"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1.0,
              "title": "Quantity"
            }
          },
          {
            "name": "serving_unit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "serving",
              "title": "Serving Unit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/nutrition/nutrition-goals": {
      "get": {
        "tags": [
          "pantry",
          "nutrition"
        ],
        "summary": "Get Nutrition Goals",
        "description": "Get personalized nutrition goals for a user.",
        "operationId": "get_nutrition_goals_api_v1_nutrition_nutrition_goals_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/nutrition/sync-health-data": {
      "post": {
        "tags": [
          "pantry",
          "nutrition"
        ],
        "summary": "Sync Health Data",
        "description": "Sync health data from external sources (Apple Health, Google Fit, etc.).",
        "operationId": "sync_health_data_api_v1_nutrition_sync_health_data_post",
        "parameters": [
          {
            "name": "data_source",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Data Source"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Health Data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/nutrition/nutrition-insights": {
      "get": {
        "tags": [
          "pantry",
          "nutrition"
        ],
        "summary": "Get Nutrition Insights",
        "description": "Get nutrition insights and trends for a user.",
        "operationId": "get_nutrition_insights_api_v1_nutrition_nutrition_insights_get",
        "parameters": [
          {
            "name": "period_days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of days to analyze",
              "default": 7,
              "title": "Period Days"
            },
            "description": "Number of days to analyze"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/preferences/": {
      "get": {
        "tags": [
          "users",
          "User Preferences"
        ],
        "summary": "Get User Preferences",
        "description": "Get user's current preferences",
        "operationId": "get_user_preferences_api_v1_preferences__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOptional": []
          }
        ]
      },
      "post": {
        "tags": [
          "users",
          "User Preferences"
        ],
        "summary": "Save User Preferences",
        "description": "Save or update user preferences",
        "operationId": "save_user_preferences_api_v1_preferences__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPreferences"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOptional": []
          }
        ]
      },
      "delete": {
        "tags": [
          "users",
          "User Preferences"
        ],
        "summary": "Clear User Preferences",
        "description": "Clear all user preferences",
        "operationId": "clear_user_preferences_api_v1_preferences__delete",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOptional": []
          }
        ]
      }
    },
    "/api/v1/mock/enable": {
      "post": {
        "tags": [
          "admin",
          "Mock Data"
        ],
        "summary": "Enable mock recipes for testing",
        "description": "Enable or disable mock recipe mode",
        "operationId": "enable_mock_recipes_api_v1_mock_enable_post",
        "parameters": [
          {
            "name": "enable",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Enable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/mock/test-recipes": {
      "get": {
        "tags": [
          "admin",
          "Mock Data"
        ],
        "summary": "Get mock recipes for testing",
        "description": "Get the mock recipes that will be used for testing",
        "operationId": "get_mock_recipes_api_v1_mock_test_recipes_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/v1/mock/mock-recipe/{recipe_id}": {
      "get": {
        "tags": [
          "admin",
          "Mock Data"
        ],
        "summary": "Get a specific mock recipe",
        "description": "Get details for a specific mock recipe",
        "operationId": "get_mock_recipe_api_v1_mock_mock_recipe__recipe_id__get",
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Recipe Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/remote-control/status": {
      "get": {
        "tags": [
          "admin",
          "Remote Control"
        ],
        "summary": "Get all mock data states",
        "description": "Get the current state of all mock data toggles",
        "operationId": "get_mock_status_api_v1_remote_control_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MockStateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/v1/remote-control/toggle": {
      "post": {
        "tags": [
          "admin",
          "Remote Control"
        ],
        "summary": "Toggle a specific mock feature",
        "description": "Toggle a specific mock data feature on or off",
        "operationId": "toggle_mock_feature_api_v1_remote_control_toggle_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MockToggleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MockStateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/remote-control/toggle-all": {
      "post": {
        "tags": [
          "admin",
          "Remote Control"
        ],
        "summary": "Toggle all mock features",
        "description": "Enable or disable all mock data features at once",
        "operationId": "toggle_all_mocks_api_v1_remote_control_toggle_all_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkToggleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MockStateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/remote-control/reset": {
      "post": {
        "tags": [
          "admin",
          "Remote Control"
        ],
        "summary": "Reset all mock data to disabled",
        "description": "Reset all mock data toggles to disabled state",
        "operationId": "reset_mock_data_api_v1_remote_control_reset_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MockStateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/v1/remote-control/features": {
      "get": {
        "tags": [
          "admin",
          "Remote Control"
        ],
        "summary": "List all available mock features",
        "description": "Get a list of all available mock features and their descriptions",
        "operationId": "list_mock_features_api_v1_remote_control_features_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response List Mock Features Api V1 Remote Control Features Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/v1/remote-control/ocr/toggle": {
      "post": {
        "tags": [
          "admin",
          "Remote Control"
        ],
        "summary": "Toggle OCR mock data (backward compatibility)",
        "description": "Toggle OCR mock data - for backward compatibility",
        "operationId": "toggle_ocr_mock_api_v1_remote_control_ocr_toggle_post",
        "parameters": [
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Enabled"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Toggle Ocr Mock Api V1 Remote Control Ocr Toggle Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/remote-control/recipes/toggle": {
      "post": {
        "tags": [
          "admin",
          "Remote Control"
        ],
        "summary": "Toggle recipe mock data (backward compatibility)",
        "description": "Toggle recipe completion mock data - for backward compatibility",
        "operationId": "toggle_recipe_mock_api_v1_remote_control_recipes_toggle_post",
        "parameters": [
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Enabled"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Toggle Recipe Mock Api V1 Remote Control Recipes Toggle Post"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sustainability/food-impact/{food_name}": {
      "get": {
        "tags": [
          "pantry",
          "sustainability"
        ],
        "summary": "Get Food Environmental Impact",
        "description": "Get environmental impact data for a specific food item\n\nArgs:\n    food_name: Name of the food item\n\nReturns:\n    Environmental impact data including CO2, land use, water use, and sustainability scores",
        "operationId": "get_food_environmental_impact_api_v1_sustainability_food_impact__food_name__get",
        "parameters": [
          {
            "name": "food_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Food Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sustainability/recipe-impact": {
      "get": {
        "tags": [
          "pantry",
          "sustainability"
        ],
        "summary": "Calculate Recipe Environmental Impact",
        "description": "Calculate total environmental impact for a recipe\n\nArgs:\n    ingredients: List of ingredient strings like \"500g beef\", \"200g rice\"\n    servings: Number of servings to calculate per-serving impact\n\nReturns:\n    Total and per-serving environmental impact",
        "operationId": "calculate_recipe_environmental_impact_api_v1_sustainability_recipe_impact_get",
        "parameters": [
          {
            "name": "ingredients",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of ingredients with quantities",
              "title": "Ingredients"
            },
            "description": "List of ingredients with quantities"
          },
          {
            "name": "servings",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of servings",
              "default": 4,
              "title": "Servings"
            },
            "description": "Number of servings"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sustainability/sustainable-swaps/{ingredient}": {
      "get": {
        "tags": [
          "pantry",
          "sustainability"
        ],
        "summary": "Get Sustainable Swaps",
        "description": "Get sustainable swap suggestions for an ingredient\n\nArgs:\n    ingredient: The ingredient to find swaps for\n    max_suggestions: Maximum number of suggestions to return\n\nReturns:\n    List of lower-impact alternatives with CO2 savings",
        "operationId": "get_sustainable_swaps_api_v1_sustainability_sustainable_swaps__ingredient__get",
        "parameters": [
          {
            "name": "ingredient",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Ingredient"
            }
          },
          {
            "name": "max_suggestions",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of suggestions",
              "default": 5,
              "title": "Max Suggestions"
            },
            "description": "Maximum number of suggestions"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sustainability/pantry-analysis": {
      "post": {
        "tags": [
          "pantry",
          "sustainability"
        ],
        "summary": "Analyze Pantry Sustainability",
        "description": "Analyze the environmental impact of a user's pantry\n\nArgs:\n    user_id: The user's ID\n\nReturns:\n    Sustainability analysis with total impact and improvement suggestions",
        "operationId": "analyze_pantry_sustainability_api_v1_sustainability_pantry_analysis_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sustainability/eco-score/{product_id}": {
      "get": {
        "tags": [
          "pantry",
          "sustainability"
        ],
        "summary": "Get Product Eco Score",
        "description": "Get the eco-score for a specific product\n\nArgs:\n    product_id: The product's ID\n\nReturns:\n    Eco-score and environmental metrics",
        "operationId": "get_product_eco_score_api_v1_sustainability_eco_score__product_id__get",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Product Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/waste-reduction/pantry-risk-analysis/{user_id}": {
      "get": {
        "tags": [
          "pantry",
          "waste reduction"
        ],
        "summary": "Analyze Pantry Waste Risk",
        "description": "Analyze waste risk for all items in user's pantry\n\nReturns items prioritized by waste risk with recommendations",
        "operationId": "analyze_pantry_waste_risk_api_v1_waste_reduction_pantry_risk_analysis__user_id__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/waste-reduction/food-waste-rate/{food_name}": {
      "get": {
        "tags": [
          "pantry",
          "waste reduction"
        ],
        "summary": "Get Food Waste Rate",
        "description": "Get typical waste rate for a specific food\n\nBased on FAO Food Loss and Waste data",
        "operationId": "get_food_waste_rate_api_v1_waste_reduction_food_waste_rate__food_name__get",
        "parameters": [
          {
            "name": "food_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Food Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/waste-reduction/waste-smart-recipes": {
      "post": {
        "tags": [
          "pantry",
          "waste reduction"
        ],
        "summary": "Get Waste Smart Recipes",
        "description": "Prioritize recipes based on waste reduction potential\n\nRanks recipes by how well they use high-waste-risk pantry items",
        "operationId": "get_waste_smart_recipes_api_v1_waste_reduction_waste_smart_recipes_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "recipe_ids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of available recipe IDs",
              "title": "Recipe Ids"
            },
            "description": "List of available recipe IDs"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/waste-reduction/waste-impact-calculator": {
      "get": {
        "tags": [
          "pantry",
          "waste reduction"
        ],
        "summary": "Calculate Waste Impact",
        "description": "Calculate economic and environmental impact of potential food waste",
        "operationId": "calculate_waste_impact_api_v1_waste_reduction_waste_impact_calculator_get",
        "parameters": [
          {
            "name": "food_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Food Name"
            }
          },
          {
            "name": "quantity_kg",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "description": "Quantity in kilograms",
              "title": "Quantity Kg"
            },
            "description": "Quantity in kilograms"
          },
          {
            "name": "price_per_kg",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Price per kilogram",
              "title": "Price Per Kg"
            },
            "description": "Price per kilogram"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/waste-reduction/weekly-waste-prevention-plan/{user_id}": {
      "post": {
        "tags": [
          "pantry",
          "waste reduction"
        ],
        "summary": "Create Waste Prevention Plan",
        "description": "Create a personalized weekly waste prevention plan\n\nUses CrewAI Waste Reduction Agent for intelligent recommendations",
        "operationId": "create_waste_prevention_plan_api_v1_waste_reduction_weekly_waste_prevention_plan__user_id__post",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/waste-reduction/waste-tracking-summary/{user_id}": {
      "get": {
        "tags": [
          "pantry",
          "waste reduction"
        ],
        "summary": "Get Waste Tracking Summary",
        "description": "Get summary of user's food waste tracking\n\nShows trends and comparisons to averages",
        "operationId": "get_waste_tracking_summary_api_v1_waste_reduction_waste_tracking_summary__user_id__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of days to look back",
              "default": 30,
              "title": "Days"
            },
            "description": "Number of days to look back"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/waste-reduction/record-waste": {
      "post": {
        "tags": [
          "pantry",
          "waste reduction"
        ],
        "summary": "Record Food Waste",
        "description": "Record food waste for tracking and analytics",
        "operationId": "record_food_waste_api_v1_waste_reduction_record_waste_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "product_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Product Name"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "title": "Quantity"
            }
          },
          {
            "name": "unit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "kg",
              "title": "Unit"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Reason for waste: expired, spoiled, excess, other",
              "default": "expired",
              "title": "Reason"
            },
            "description": "Reason for waste: expired, spoiled, excess, other"
          },
          {
            "name": "estimated_value",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Estimated Value"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/semantic-search/recipes": {
      "post": {
        "tags": [
          "recipes",
          "semantic-search"
        ],
        "summary": "Semantic Search Recipes",
        "description": "Search for recipes using semantic similarity\n\nThis endpoint uses vector embeddings to find recipes that are semantically\nsimilar to the search query, even if they don't contain the exact keywords.",
        "operationId": "semantic_search_recipes_api_v1_semantic_search_recipes_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemanticSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RecipeSearchResult"
                  },
                  "type": "array",
                  "title": "Response Semantic Search Recipes Api V1 Semantic Search Recipes Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOptional": []
          }
        ]
      }
    },
    "/api/v1/semantic-search/recipes/hybrid": {
      "post": {
        "tags": [
          "recipes",
          "semantic-search"
        ],
        "summary": "Hybrid Recipe Search",
        "description": "Search for recipes using hybrid approach (semantic + ingredient matching)\n\nThis endpoint combines semantic similarity with ingredient availability\nto find the most relevant recipes based on both the search intent and\navailable ingredients in the pantry.",
        "operationId": "hybrid_recipe_search_api_v1_semantic_search_recipes_hybrid_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HybridSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RecipeSearchResult"
                  },
                  "type": "array",
                  "title": "Response Hybrid Recipe Search Api V1 Semantic Search Recipes Hybrid Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOptional": []
          }
        ]
      }
    },
    "/api/v1/semantic-search/products": {
      "post": {
        "tags": [
          "recipes",
          "semantic-search"
        ],
        "summary": "Semantic Search Products",
        "description": "Search for products using semantic similarity\n\nThis endpoint uses vector embeddings to find products that are semantically\nsimilar to the search query.",
        "operationId": "semantic_search_products_api_v1_semantic_search_products_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemanticSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProductSearchResult"
                  },
                  "type": "array",
                  "title": "Response Semantic Search Products Api V1 Semantic Search Products Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOptional": []
          }
        ]
      }
    },
    "/api/v1/semantic-search/pantry/similar/{item_name}": {
      "get": {
        "tags": [
          "recipes",
          "semantic-search"
        ],
        "summary": "Find Similar Pantry Items",
        "description": "Find pantry items similar to a given item name\n\nThis endpoint is useful for finding duplicates or similar items\nthat might be the same product with slightly different names.",
        "operationId": "find_similar_pantry_items_api_v1_semantic_search_pantry_similar__item_name__get",
        "security": [
          {
            "OAuth2PasswordBearerOptional": []
          }
        ],
        "parameters": [
          {
            "name": "item_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Item Name"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 20,
              "minimum": 1,
              "description": "Maximum number of similar items",
              "default": 5,
              "title": "Limit"
            },
            "description": "Maximum number of similar items"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PantryItemSearchResult"
                  },
                  "title": "Response Find Similar Pantry Items Api V1 Semantic Search Pantry Similar  Item Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/semantic-search/update-embedding/{entity_type}/{entity_id}": {
      "post": {
        "tags": [
          "recipes",
          "semantic-search"
        ],
        "summary": "Update Entity Embedding",
        "description": "Update the embedding for a specific entity\n\nThis endpoint regenerates the embedding for a recipe, product, or pantry item.\nUseful when the entity data has been updated.",
        "operationId": "update_entity_embedding_api_v1_semantic_search_update_embedding__entity_type___entity_id__post",
        "security": [
          {
            "OAuth2PasswordBearerOptional": []
          }
        ],
        "parameters": [
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Entity Type"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Entity Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Update Entity Embedding Api V1 Semantic Search Update Embedding  Entity Type   Entity Id  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/semantic-search/search-analytics": {
      "get": {
        "tags": [
          "recipes",
          "semantic-search"
        ],
        "summary": "Get Search Analytics",
        "description": "Get search analytics for the current user\n\nReturns information about recent searches, popular queries, and search patterns.",
        "operationId": "get_search_analytics_api_v1_semantic_search_search_analytics_get",
        "security": [
          {
            "OAuth2PasswordBearerOptional": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 30,
              "minimum": 1,
              "description": "Number of days to analyze",
              "default": 7,
              "title": "Days"
            },
            "description": "Number of days to analyze"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Search Analytics Api V1 Semantic Search Search Analytics Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/supply-chain-impact/today-impact/{user_id}": {
      "get": {
        "tags": [
          "pantry",
          "supply chain impact"
        ],
        "summary": "Get Today Impact",
        "description": "Calculate today's supply chain impact based on expiring items\n\nShows the amplified environmental impact when accounting for upstream losses",
        "operationId": "get_today_impact_supply_chain_impact_today_impact__user_id__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/supply-chain-impact/supply-chain-guide": {
      "get": {
        "tags": [
          "pantry",
          "supply chain impact"
        ],
        "summary": "Get Supply Chain Guide",
        "description": "Get educational information about supply chain waste multipliers\n\nReturns data about which foods have highest upstream impact",
        "operationId": "get_supply_chain_guide_supply_chain_impact_supply_chain_guide_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/supply-chain-impact/weekly-trends/{user_id}": {
      "get": {
        "tags": [
          "pantry",
          "supply chain impact"
        ],
        "summary": "Get Weekly Trends",
        "description": "Get weekly trends showing prevented vs wasted impact over time",
        "operationId": "get_weekly_trends_supply_chain_impact_weekly_trends__user_id__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "weeks",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of weeks to analyze",
              "default": 4,
              "title": "Weeks"
            },
            "description": "Number of weeks to analyze"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/usda/search": {
      "get": {
        "tags": [
          "pantry",
          "USDA Food Database"
        ],
        "summary": "Search Foods",
        "description": "Search USDA food database\n\nArgs:\n    query: Search term for food items\n    limit: Maximum number of results to return\n\nReturns:\n    List of matching food items with nutritional data",
        "operationId": "search_foods_api_v1_usda_search_get",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Search query for food items",
              "title": "Query"
            },
            "description": "Search query for food items"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Maximum number of results",
              "default": 10,
              "title": "Limit"
            },
            "description": "Maximum number of results"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response Search Foods Api V1 Usda Search Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/usda/food/{fdc_id}": {
      "get": {
        "tags": [
          "pantry",
          "USDA Food Database"
        ],
        "summary": "Get Food Details",
        "description": "Get detailed nutritional information for a specific food\n\nArgs:\n    fdc_id: USDA FDC ID for the food item\n\nReturns:\n    Detailed nutritional information",
        "operationId": "get_food_details_api_v1_usda_food__fdc_id__get",
        "parameters": [
          {
            "name": "fdc_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Fdc Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Food Details Api V1 Usda Food  Fdc Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/usda/nutrients/{food_name}": {
      "get": {
        "tags": [
          "pantry",
          "USDA Food Database"
        ],
        "summary": "Get Nutrients By Name",
        "description": "Get nutritional information by food name\n\nArgs:\n    food_name: Name of the food item\n    serving_size: Serving size in grams (default: 100g)\n\nReturns:\n    Nutritional information for the specified serving",
        "operationId": "get_nutrients_by_name_api_v1_usda_nutrients__food_name__get",
        "parameters": [
          {
            "name": "food_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Food Name"
            }
          },
          {
            "name": "serving_size",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Serving size in grams",
              "default": 100,
              "title": "Serving Size"
            },
            "description": "Serving size in grams"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Nutrients By Name Api V1 Usda Nutrients  Food Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/usda/units/validate": {
      "get": {
        "tags": [
          "pantry",
          "USDA Unit Validation"
        ],
        "summary": "Validate Unit For Food",
        "description": "Validate if a unit is appropriate for a food item using USDA data.\n\nArgs:\n    food_name: Name of the food item\n    unit: Unit to validate (e.g., 'cup', 'lb', 'each')\n    category_id: Optional USDA food category ID\n\nReturns:\n    Validation result with suggestions",
        "operationId": "validate_unit_for_food_api_v1_usda_units_validate_get",
        "parameters": [
          {
            "name": "food_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the food item",
              "title": "Food Name"
            },
            "description": "Name of the food item"
          },
          {
            "name": "unit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unit to validate",
              "title": "Unit"
            },
            "description": "Unit to validate"
          },
          {
            "name": "category_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional food category ID",
              "title": "Category Id"
            },
            "description": "Optional food category ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Validate Unit For Food Api V1 Usda Units Validate Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/usda/units/category/{category_id}/units": {
      "get": {
        "tags": [
          "pantry",
          "USDA Unit Validation"
        ],
        "summary": "Get Units For Category",
        "description": "Get appropriate units for a food category based on USDA data.\n\nArgs:\n    category_id: USDA food category ID\n    preferred_only: If true, return only the most commonly used units\n\nReturns:\n    List of units with usage statistics",
        "operationId": "get_units_for_category_api_v1_usda_units_category__category_id__units_get",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Category Id"
            }
          },
          {
            "name": "preferred_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Return only preferred units",
              "default": false,
              "title": "Preferred Only"
            },
            "description": "Return only preferred units"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response Get Units For Category Api V1 Usda Units Category  Category Id  Units Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/usda/units/suggest-units": {
      "get": {
        "tags": [
          "pantry",
          "USDA Unit Validation"
        ],
        "summary": "Suggest Units For Food",
        "description": "Suggest appropriate units for a food item based on USDA data patterns.\n\nArgs:\n    food_name: Name of the food item\n    limit: Maximum number of unit suggestions\n\nReturns:\n    Unit suggestions with confidence scores",
        "operationId": "suggest_units_for_food_api_v1_usda_units_suggest_units_get",
        "parameters": [
          {
            "name": "food_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the food item",
              "title": "Food Name"
            },
            "description": "Name of the food item"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10,
              "minimum": 1,
              "description": "Maximum number of suggestions",
              "default": 5,
              "title": "Limit"
            },
            "description": "Maximum number of suggestions"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Suggest Units For Food Api V1 Usda Units Suggest Units Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/usda/units/unit-types": {
      "get": {
        "tags": [
          "pantry",
          "USDA Unit Validation"
        ],
        "summary": "Get Unit Types",
        "description": "Get all available unit types from USDA data.\n\nReturns:\n    List of unit types (e.g., 'volume', 'weight', 'count')",
        "operationId": "get_unit_types_api_v1_usda_units_unit_types_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Response Get Unit Types Api V1 Usda Units Unit Types Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/units/validate": {
      "post": {
        "tags": [
          "pantry",
          "Unit Validation"
        ],
        "summary": "Validate Unit",
        "description": "Validate if a unit is appropriate for a food item.\n\nExample: strawberries with unit 'mL' → error, suggest 'lb' or 'container'",
        "operationId": "validate_unit_api_v1_units_validate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnitValidationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitValidationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/units/check-pantry/{user_id}": {
      "get": {
        "tags": [
          "pantry",
          "Unit Validation"
        ],
        "summary": "Check Pantry Units",
        "description": "Check all pantry items for unit validation issues.\n\nReturns summary of problems and suggested fixes.",
        "operationId": "check_pantry_units_api_v1_units_check_pantry__user_id__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Check Pantry Units Api V1 Units Check Pantry  User Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/units/fix-pantry/{user_id}": {
      "post": {
        "tags": [
          "pantry",
          "Unit Validation"
        ],
        "summary": "Fix Pantry Units",
        "description": "Fix unit validation issues in pantry.\n\nArgs:\n    user_id: User ID\n    auto_fix: If True, automatically update units. If False, just return suggestions.\n\nReturns:\n    Summary of fixes applied or suggested",
        "operationId": "fix_pantry_units_api_v1_units_fix_pantry__user_id__post",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          },
          {
            "name": "auto_fix",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Auto Fix"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Fix Pantry Units Api V1 Units Fix Pantry  User Id  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/units/suggestions/{item_name}": {
      "get": {
        "tags": [
          "pantry",
          "Unit Validation"
        ],
        "summary": "Get Unit Suggestions",
        "description": "Get suggested units for a food item.\n\nUseful for dropdowns when adding items manually.",
        "operationId": "get_unit_suggestions_api_v1_units_suggestions__item_name__get",
        "parameters": [
          {
            "name": "item_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Item Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Unit Suggestions Api V1 Units Suggestions  Item Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/units/categories": {
      "get": {
        "tags": [
          "pantry",
          "Unit Validation"
        ],
        "summary": "Get Unit Categories",
        "description": "Get all unit categories and their rules.\n\nUseful for understanding unit validation logic.",
        "operationId": "get_unit_categories_api_v1_units_categories_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Unit Categories Api V1 Units Categories Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/units/batch-validate": {
      "post": {
        "tags": [
          "pantry",
          "Unit Validation"
        ],
        "summary": "Batch Validate Units",
        "description": "Validate multiple items at once.\n\nUseful for validating OCR results before adding to pantry.",
        "operationId": "batch_validate_units_api_v1_units_batch_validate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/UnitValidationRequest"
                },
                "type": "array",
                "title": "Items"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Batch Validate Units Api V1 Units Batch Validate Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "Root"
        ],
        "summary": "Root",
        "description": "Root endpoint with API information.",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/health": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Health Check",
        "description": "Comprehensive health check endpoint.\n\nReturns detailed system status including:\n- API service health\n- External service configurations\n- Database connectivity\n- AI service availability\n- Monitoring system status",
        "operationId": "health_check_api_v1_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddItemsRequest": {
        "properties": {
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "User ID"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/ShoppingListItem"
            },
            "type": "array",
            "title": "Items",
            "description": "Items to add"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "items"
        ],
        "title": "AddItemsRequest"
      },
      "BarcodeResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "barcode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Barcode"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "BarcodeResponse",
        "description": "Response model for barcode scanning."
      },
      "Body_force_fresh_detection_api_v1_ocr_debug_force_fresh_detection_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_force_fresh_detection_api_v1_ocr_debug_force_fresh_detection_post"
      },
      "Body_login_for_access_token_api_v1_token_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "format": "password",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_for_access_token_api_v1_token_post"
      },
      "Body_scan_barcode_api_v1_ocr_scan_barcode_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_scan_barcode_api_v1_ocr_scan_barcode_post"
      },
      "Body_scan_items_api_v1_ocr_scan_items_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_scan_items_api_v1_ocr_scan_items_post"
      },
      "Body_upload_image_api_v1_images_upload_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_image_api_v1_images_upload_post"
      },
      "BulkToggleRequest": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled"
          },
          "changed_by": {
            "type": "string",
            "title": "Changed By",
            "default": "api"
          }
        },
        "type": "object",
        "required": [
          "enabled"
        ],
        "title": "BulkToggleRequest",
        "description": "Request model for toggling all mock features"
      },
      "ChatMessage": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "default": 111
          },
          "use_preferences": {
            "type": "boolean",
            "title": "Use Preferences",
            "default": true
          },
          "include_nutrition": {
            "type": "boolean",
            "title": "Include Nutrition",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "ChatMessage"
      },
      "ChatResponse": {
        "properties": {
          "response": {
            "type": "string",
            "title": "Response"
          },
          "recipes": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recipes",
            "default": []
          },
          "pantry_items": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Pantry Items",
            "default": []
          },
          "user_preferences": {
            "additionalProperties": true,
            "type": "object",
            "title": "User Preferences"
          },
          "show_preference_choice": {
            "type": "boolean",
            "title": "Show Preference Choice",
            "default": false
          },
          "nutrient_analysis": {
            "additionalProperties": true,
            "type": "object",
            "title": "Nutrient Analysis"
          }
        },
        "type": "object",
        "required": [
          "response"
        ],
        "title": "ChatResponse"
      },
      "CleanupRequest": {
        "properties": {
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "default": 111
          },
          "hours_ago": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hours Ago"
          }
        },
        "type": "object",
        "title": "CleanupRequest"
      },
      "CookRecipeRequest": {
        "properties": {
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "User ID"
          },
          "recipe_id": {
            "type": "integer",
            "title": "Recipe Id",
            "description": "Spoonacular recipe ID"
          },
          "recipe_title": {
            "type": "string",
            "title": "Recipe Title",
            "description": "Recipe title"
          },
          "servings": {
            "type": "integer",
            "title": "Servings",
            "description": "Number of servings being made",
            "default": 1
          },
          "ingredients_used": {
            "items": {
              "$ref": "#/components/schemas/IngredientUsage"
            },
            "type": "array",
            "title": "Ingredients Used",
            "description": "List of ingredients used from pantry"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "recipe_id",
          "recipe_title",
          "ingredients_used"
        ],
        "title": "CookRecipeRequest",
        "description": "Request model for cooking a recipe"
      },
      "DebugStatusResponse": {
        "properties": {
          "mock_data_enabled": {
            "type": "boolean",
            "title": "Mock Data Enabled"
          },
          "cache_stats": {
            "additionalProperties": true,
            "type": "object",
            "title": "Cache Stats"
          },
          "openai_client_status": {
            "type": "string",
            "title": "Openai Client Status"
          },
          "recent_detections": {
            "type": "integer",
            "title": "Recent Detections"
          },
          "image_hash_examples": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Image Hash Examples"
          }
        },
        "type": "object",
        "required": [
          "mock_data_enabled",
          "cache_stats",
          "openai_client_status",
          "recent_detections",
          "image_hash_examples"
        ],
        "title": "DebugStatusResponse",
        "description": "Response model for debug status information."
      },
      "DetectedItem": {
        "properties": {
          "item_name": {
            "type": "string",
            "title": "Item Name"
          },
          "quantity_amount": {
            "type": "number",
            "title": "Quantity Amount"
          },
          "quantity_unit": {
            "type": "string",
            "title": "Quantity Unit"
          },
          "expected_expiration": {
            "type": "string",
            "title": "Expected Expiration"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category",
            "default": "Uncategorized"
          },
          "brand": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand",
            "default": "Generic"
          }
        },
        "type": "object",
        "required": [
          "item_name",
          "quantity_amount",
          "quantity_unit",
          "expected_expiration"
        ],
        "title": "DetectedItem"
      },
      "FoodCategoryRules": {
        "properties": {
          "category": {
            "type": "string",
            "title": "Category"
          },
          "allowed_unit_categories": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Allowed Unit Categories"
          },
          "default_unit_category": {
            "type": "string",
            "title": "Default Unit Category"
          },
          "default_unit": {
            "type": "string",
            "title": "Default Unit"
          },
          "available_units": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/Unit"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Available Units"
          }
        },
        "type": "object",
        "required": [
          "category",
          "allowed_unit_categories",
          "default_unit_category",
          "default_unit",
          "available_units"
        ],
        "title": "FoodCategoryRules"
      },
      "GetNutrientGapsResponse": {
        "properties": {
          "analysis": {
            "$ref": "#/components/schemas/NutrientGapAnalysis"
          },
          "recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommendations"
          },
          "priority_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority Message"
          }
        },
        "type": "object",
        "required": [
          "analysis"
        ],
        "title": "GetNutrientGapsResponse",
        "description": "Response with nutrient gap analysis."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HybridSearchRequest": {
        "properties": {
          "query": {
            "type": "string",
            "maxLength": 500,
            "minLength": 1,
            "title": "Query",
            "description": "Search query text"
          },
          "available_ingredients": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Available Ingredients",
            "description": "List of available ingredients"
          },
          "limit": {
            "type": "integer",
            "maximum": 50.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "Maximum number of results",
            "default": 10
          },
          "semantic_weight": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Semantic Weight",
            "description": "Weight for semantic similarity",
            "default": 0.6
          },
          "ingredient_weight": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Ingredient Weight",
            "description": "Weight for ingredient matching",
            "default": 0.4
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "HybridSearchRequest",
        "description": "Request model for hybrid search"
      },
      "ImageGenerationRequest": {
        "properties": {
          "recipe_name": {
            "type": "string",
            "title": "Recipe Name"
          },
          "style": {
            "type": "string",
            "title": "Style",
            "default": "professional food photography"
          },
          "use_generated": {
            "type": "boolean",
            "title": "Use Generated",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "recipe_name"
        ],
        "title": "ImageGenerationRequest"
      },
      "ImageGenerationResponse": {
        "properties": {
          "image_url": {
            "type": "string",
            "title": "Image Url"
          },
          "recipe_name": {
            "type": "string",
            "title": "Recipe Name"
          }
        },
        "type": "object",
        "required": [
          "image_url",
          "recipe_name"
        ],
        "title": "ImageGenerationResponse"
      },
      "IngredientCheckRequest": {
        "properties": {
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "User ID"
          },
          "recipe_id": {
            "type": "integer",
            "title": "Recipe Id",
            "description": "Spoonacular recipe ID"
          },
          "servings": {
            "type": "integer",
            "title": "Servings",
            "description": "Number of servings being made",
            "default": 1
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "recipe_id"
        ],
        "title": "IngredientCheckRequest",
        "description": "Request model for checking ingredient availability"
      },
      "IngredientSelection": {
        "properties": {
          "ingredient_name": {
            "type": "string",
            "title": "Ingredient Name",
            "description": "Name of the ingredient"
          },
          "pantry_item_id": {
            "type": "integer",
            "title": "Pantry Item Id",
            "description": "Selected pantry item ID"
          },
          "quantity_to_use": {
            "type": "number",
            "title": "Quantity To Use",
            "description": "Quantity to use"
          },
          "unit": {
            "type": "string",
            "title": "Unit",
            "description": "Unit of measurement"
          }
        },
        "type": "object",
        "required": [
          "ingredient_name",
          "pantry_item_id",
          "quantity_to_use",
          "unit"
        ],
        "title": "IngredientSelection",
        "description": "Model for ingredient selection in quick complete"
      },
      "IngredientUsage": {
        "properties": {
          "pantry_item_id": {
            "type": "integer",
            "title": "Pantry Item Id",
            "description": "ID of the pantry item to use"
          },
          "ingredient_name": {
            "type": "string",
            "title": "Ingredient Name",
            "description": "Name of the ingredient"
          },
          "quantity_used": {
            "type": "number",
            "title": "Quantity Used",
            "description": "Amount of ingredient used"
          },
          "unit": {
            "type": "string",
            "title": "Unit",
            "description": "Unit of measurement"
          }
        },
        "type": "object",
        "required": [
          "pantry_item_id",
          "ingredient_name",
          "quantity_used",
          "unit"
        ],
        "title": "IngredientUsage",
        "description": "Model for ingredient usage in a recipe"
      },
      "LogMealRequest": {
        "properties": {
          "meal_type": {
            "$ref": "#/components/schemas/MealType"
          },
          "food_name": {
            "type": "string",
            "title": "Food Name"
          },
          "quantity": {
            "type": "number",
            "title": "Quantity",
            "default": 1.0
          },
          "serving_unit": {
            "type": "string",
            "title": "Serving Unit",
            "default": "serving"
          },
          "brand": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "type": "object",
        "required": [
          "meal_type",
          "food_name"
        ],
        "title": "LogMealRequest",
        "description": "Request to log a meal."
      },
      "LogMealResponse": {
        "properties": {
          "meal_id": {
            "type": "string",
            "title": "Meal Id"
          },
          "nutrients_added": {
            "$ref": "#/components/schemas/NutrientProfile"
          },
          "daily_total": {
            "$ref": "#/components/schemas/NutrientProfile"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "meal_id",
          "nutrients_added",
          "daily_total",
          "message"
        ],
        "title": "LogMealResponse",
        "description": "Response after logging a meal."
      },
      "MealType": {
        "type": "string",
        "enum": [
          "breakfast",
          "lunch",
          "dinner",
          "snack",
          "beverage"
        ],
        "title": "MealType",
        "description": "Types of meals for dietary logging."
      },
      "MockDataConfig": {
        "properties": {
          "use_mock_data": {
            "type": "boolean",
            "title": "Use Mock Data"
          }
        },
        "type": "object",
        "required": [
          "use_mock_data"
        ],
        "title": "MockDataConfig",
        "description": "Configuration model for toggling mock data."
      },
      "MockRecipeCompletionConfig": {
        "properties": {
          "use_mock_data": {
            "type": "boolean",
            "title": "Use Mock Data"
          }
        },
        "type": "object",
        "required": [
          "use_mock_data"
        ],
        "title": "MockRecipeCompletionConfig"
      },
      "MockStateResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "states": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object",
            "title": "States"
          },
          "summary": {
            "additionalProperties": true,
            "type": "object",
            "title": "Summary"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "states",
          "summary",
          "message"
        ],
        "title": "MockStateResponse",
        "description": "Response model for mock state queries"
      },
      "MockToggleRequest": {
        "properties": {
          "feature": {
            "type": "string",
            "title": "Feature"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled"
          },
          "changed_by": {
            "type": "string",
            "title": "Changed By",
            "default": "api"
          }
        },
        "type": "object",
        "required": [
          "feature",
          "enabled"
        ],
        "title": "MockToggleRequest",
        "description": "Request model for toggling a specific mock feature"
      },
      "NutrientAwareRecipeRequest": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "include_nutrient_gaps": {
            "type": "boolean",
            "title": "Include Nutrient Gaps",
            "default": true
          },
          "focus_nutrients": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Focus Nutrients"
          },
          "meal_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MealType"
              },
              {
                "type": "null"
              }
            ]
          },
          "max_recipes": {
            "type": "integer",
            "title": "Max Recipes",
            "default": 5
          }
        },
        "type": "object",
        "required": [
          "user_id"
        ],
        "title": "NutrientAwareRecipeRequest",
        "description": "Request for nutrient-aware recipe recommendations."
      },
      "NutrientGap": {
        "properties": {
          "nutrient": {
            "type": "string",
            "title": "Nutrient"
          },
          "consumed": {
            "type": "number",
            "title": "Consumed"
          },
          "recommended": {
            "type": "number",
            "title": "Recommended"
          },
          "gap": {
            "type": "number",
            "title": "Gap"
          },
          "percentage_met": {
            "type": "number",
            "title": "Percentage Met"
          },
          "is_deficient": {
            "type": "boolean",
            "title": "Is Deficient"
          },
          "is_excessive": {
            "type": "boolean",
            "title": "Is Excessive"
          },
          "priority": {
            "type": "string",
            "title": "Priority",
            "default": "medium"
          }
        },
        "type": "object",
        "required": [
          "nutrient",
          "consumed",
          "recommended",
          "gap",
          "percentage_met",
          "is_deficient",
          "is_excessive"
        ],
        "title": "NutrientGap",
        "description": "Nutrient gap analysis for a user."
      },
      "NutrientGapAnalysis": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "analysis_date": {
            "type": "string",
            "format": "date",
            "title": "Analysis Date"
          },
          "period_days": {
            "type": "integer",
            "title": "Period Days",
            "default": 1
          },
          "gaps": {
            "items": {
              "$ref": "#/components/schemas/NutrientGap"
            },
            "type": "array",
            "title": "Gaps"
          },
          "priority_deficiencies": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Priority Deficiencies"
          },
          "priority_excesses": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Priority Excesses"
          },
          "overall_score": {
            "type": "number",
            "title": "Overall Score",
            "default": 0.0
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "analysis_date"
        ],
        "title": "NutrientGapAnalysis",
        "description": "Complete nutrient gap analysis for a user."
      },
      "NutrientProfile": {
        "properties": {
          "protein": {
            "type": "number",
            "title": "Protein",
            "default": 0.0
          },
          "carbohydrates": {
            "type": "number",
            "title": "Carbohydrates",
            "default": 0.0
          },
          "fiber": {
            "type": "number",
            "title": "Fiber",
            "default": 0.0
          },
          "total_fat": {
            "type": "number",
            "title": "Total Fat",
            "default": 0.0
          },
          "saturated_fat": {
            "type": "number",
            "title": "Saturated Fat",
            "default": 0.0
          },
          "trans_fat": {
            "type": "number",
            "title": "Trans Fat",
            "default": 0.0
          },
          "sugar": {
            "type": "number",
            "title": "Sugar",
            "default": 0.0
          },
          "vitamin_c": {
            "type": "number",
            "title": "Vitamin C",
            "default": 0.0
          },
          "vitamin_a": {
            "type": "number",
            "title": "Vitamin A",
            "default": 0.0
          },
          "vitamin_d": {
            "type": "number",
            "title": "Vitamin D",
            "default": 0.0
          },
          "vitamin_e": {
            "type": "number",
            "title": "Vitamin E",
            "default": 0.0
          },
          "vitamin_k": {
            "type": "number",
            "title": "Vitamin K",
            "default": 0.0
          },
          "thiamin": {
            "type": "number",
            "title": "Thiamin",
            "default": 0.0
          },
          "riboflavin": {
            "type": "number",
            "title": "Riboflavin",
            "default": 0.0
          },
          "niacin": {
            "type": "number",
            "title": "Niacin",
            "default": 0.0
          },
          "vitamin_b6": {
            "type": "number",
            "title": "Vitamin B6",
            "default": 0.0
          },
          "folate": {
            "type": "number",
            "title": "Folate",
            "default": 0.0
          },
          "vitamin_b12": {
            "type": "number",
            "title": "Vitamin B12",
            "default": 0.0
          },
          "calcium": {
            "type": "number",
            "title": "Calcium",
            "default": 0.0
          },
          "iron": {
            "type": "number",
            "title": "Iron",
            "default": 0.0
          },
          "magnesium": {
            "type": "number",
            "title": "Magnesium",
            "default": 0.0
          },
          "phosphorus": {
            "type": "number",
            "title": "Phosphorus",
            "default": 0.0
          },
          "potassium": {
            "type": "number",
            "title": "Potassium",
            "default": 0.0
          },
          "sodium": {
            "type": "number",
            "title": "Sodium",
            "default": 0.0
          },
          "zinc": {
            "type": "number",
            "title": "Zinc",
            "default": 0.0
          },
          "copper": {
            "type": "number",
            "title": "Copper",
            "default": 0.0
          },
          "selenium": {
            "type": "number",
            "title": "Selenium",
            "default": 0.0
          },
          "cholesterol": {
            "type": "number",
            "title": "Cholesterol",
            "default": 0.0
          },
          "omega_3": {
            "type": "number",
            "title": "Omega 3",
            "default": 0.0
          },
          "omega_6": {
            "type": "number",
            "title": "Omega 6",
            "default": 0.0
          },
          "calories": {
            "type": "number",
            "title": "Calories",
            "default": 0.0
          }
        },
        "type": "object",
        "title": "NutrientProfile",
        "description": "Comprehensive nutrient profile for foods/recipes."
      },
      "OCRResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/ParsedItem"
            },
            "type": "array",
            "title": "Items"
          },
          "raw_text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Raw Text"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": ""
          },
          "debug_info": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Debug Info"
          }
        },
        "type": "object",
        "required": [
          "success",
          "items"
        ],
        "title": "OCRResponse",
        "description": "Response model for OCR processing endpoints."
      },
      "PantryItemConsumption": {
        "properties": {
          "quantity_amount": {
            "type": "number",
            "minimum": 0.0,
            "title": "Quantity Amount",
            "description": "New quantity amount after consumption"
          },
          "used_quantity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Used Quantity",
            "description": "Total amount that has been used"
          }
        },
        "type": "object",
        "required": [
          "quantity_amount"
        ],
        "title": "PantryItemConsumption"
      },
      "PantryItemCreate": {
        "properties": {
          "product_name": {
            "type": "string",
            "title": "Product Name",
            "description": "Name of the product.",
            "example": "Whole Milk"
          },
          "quantity": {
            "type": "number",
            "minimum": 0.0,
            "title": "Quantity",
            "description": "Quantity of the item. 0 means the item is depleted.",
            "example": 1.0
          },
          "unit_of_measurement": {
            "type": "string",
            "title": "Unit Of Measurement",
            "description": "Unit of measurement (e.g., kg, lbs, gallon, liter).",
            "example": "gallon"
          },
          "expiration_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Date",
            "description": "Expiration date of the item."
          },
          "purchase_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Purchase Date",
            "description": "Date the item was purchased."
          },
          "unit_price": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit Price",
            "description": "Price per unit of the item.",
            "example": 3.5
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category",
            "description": "Category of the product.",
            "example": "Dairy"
          }
        },
        "type": "object",
        "required": [
          "product_name",
          "quantity",
          "unit_of_measurement"
        ],
        "title": "PantryItemCreate"
      },
      "PantryItemSearchResult": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "item_name": {
            "type": "string",
            "title": "Item Name"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "quantity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity"
          },
          "unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit"
          },
          "similarity_score": {
            "type": "number",
            "title": "Similarity Score"
          }
        },
        "type": "object",
        "required": [
          "id",
          "item_name",
          "category",
          "location",
          "quantity",
          "unit",
          "similarity_score"
        ],
        "title": "PantryItemSearchResult",
        "description": "Response model for pantry item search results"
      },
      "ParsedItem": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "quantity": {
            "type": "number",
            "title": "Quantity"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "barcode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Barcode"
          },
          "brand": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand"
          },
          "product_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Name"
          },
          "nutrition_info": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nutrition Info"
          },
          "expiration_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Date"
          }
        },
        "type": "object",
        "required": [
          "name",
          "quantity",
          "unit"
        ],
        "title": "ParsedItem",
        "description": "Represents a single parsed item from OCR processing."
      },
      "PreferencesResponse": {
        "properties": {
          "user_id": {
            "type": "integer",
            "title": "User Id"
          },
          "preferences": {
            "$ref": "#/components/schemas/UserPreferences"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "preferences",
          "updated_at"
        ],
        "title": "PreferencesResponse"
      },
      "ProductSearchResult": {
        "properties": {
          "product_id": {
            "type": "integer",
            "title": "Product Id"
          },
          "product_name": {
            "type": "string",
            "title": "Product Name"
          },
          "brand": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "similarity_score": {
            "type": "number",
            "title": "Similarity Score"
          }
        },
        "type": "object",
        "required": [
          "product_id",
          "product_name",
          "brand",
          "category",
          "similarity_score"
        ],
        "title": "ProductSearchResult",
        "description": "Response model for product search results"
      },
      "QuickCompleteRequest": {
        "properties": {
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "User ID"
          },
          "recipe_id": {
            "type": "integer",
            "title": "Recipe Id",
            "description": "Spoonacular recipe ID"
          },
          "servings": {
            "type": "integer",
            "title": "Servings",
            "description": "Number of servings being made",
            "default": 1
          },
          "ingredient_selections": {
            "items": {
              "$ref": "#/components/schemas/IngredientSelection"
            },
            "type": "array",
            "title": "Ingredient Selections",
            "description": "Selected ingredients"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "recipe_id",
          "ingredient_selections"
        ],
        "title": "QuickCompleteRequest",
        "description": "Request model for quick completing a recipe"
      },
      "ReceiptScanRequest": {
        "properties": {
          "image_base64": {
            "type": "string",
            "title": "Image Base64"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          }
        },
        "type": "object",
        "required": [
          "image_base64"
        ],
        "title": "ReceiptScanRequest",
        "description": "Request model for receipt scanning with base64 image data."
      },
      "RecipeCompletionRequest": {
        "properties": {
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "ID of the user"
          },
          "recipe_name": {
            "type": "string",
            "title": "Recipe Name",
            "description": "Name of the completed recipe"
          },
          "ingredients": {
            "items": {
              "$ref": "#/components/schemas/RecipeIngredient"
            },
            "type": "array",
            "title": "Ingredients",
            "description": "List of ingredients to subtract"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "recipe_name",
          "ingredients"
        ],
        "title": "RecipeCompletionRequest"
      },
      "RecipeFromPantryRequest": {
        "properties": {
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "User ID to get pantry items from"
          },
          "max_missing_ingredients": {
            "type": "integer",
            "title": "Max Missing Ingredients",
            "description": "Maximum number of missing ingredients allowed",
            "default": 5
          },
          "use_expiring_first": {
            "type": "boolean",
            "title": "Use Expiring First",
            "description": "Prioritize items expiring soon",
            "default": true
          },
          "intolerances": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Intolerances",
            "description": "List of allergens/intolerances to exclude (e.g., dairy, gluten, peanut)"
          }
        },
        "type": "object",
        "required": [
          "user_id"
        ],
        "title": "RecipeFromPantryRequest"
      },
      "RecipeIngredient": {
        "properties": {
          "ingredient_name": {
            "type": "string",
            "title": "Ingredient Name",
            "description": "Name of the ingredient"
          },
          "quantity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity",
            "description": "Quantity to subtract (if not provided, subtract all)"
          },
          "unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit",
            "description": "Unit of measurement"
          }
        },
        "type": "object",
        "required": [
          "ingredient_name"
        ],
        "title": "RecipeIngredient"
      },
      "RecipeSearchByIngredientsRequest": {
        "properties": {
          "ingredients": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Ingredients",
            "description": "List of ingredients to search with"
          },
          "number": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Number",
            "description": "Number of recipes to return",
            "default": 10
          },
          "ranking": {
            "type": "integer",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Ranking",
            "description": "0 = maximize used ingredients, 1 = minimize missing ingredients",
            "default": 1
          },
          "ignore_pantry": {
            "type": "boolean",
            "title": "Ignore Pantry",
            "description": "Whether to ignore typical pantry items",
            "default": false
          },
          "intolerances": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Intolerances",
            "description": "List of allergens/intolerances to exclude (e.g., dairy, gluten, peanut)"
          }
        },
        "type": "object",
        "required": [
          "ingredients"
        ],
        "title": "RecipeSearchByIngredientsRequest"
      },
      "RecipeSearchComplexRequest": {
        "properties": {
          "query": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Query",
            "description": "Natural language search query"
          },
          "cuisine": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cuisine",
            "description": "Cuisine type"
          },
          "diet": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Diet",
            "description": "Diet type"
          },
          "include_ingredients": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Include Ingredients",
            "description": "Ingredients that must be included"
          },
          "exclude_ingredients": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exclude Ingredients",
            "description": "Ingredients to exclude"
          },
          "intolerances": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Intolerances",
            "description": "List of allergens/intolerances to exclude (e.g., dairy, gluten, peanut)"
          },
          "max_ready_time": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Ready Time",
            "description": "Maximum ready time in minutes"
          },
          "sort": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sort",
            "description": "Sort by (popularity, time, etc.)"
          },
          "number": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Number",
            "description": "Number of results",
            "default": 10
          },
          "offset": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Offset",
            "description": "Results offset for pagination",
            "default": 0
          }
        },
        "type": "object",
        "title": "RecipeSearchComplexRequest"
      },
      "RecipeSearchResult": {
        "properties": {
          "recipe_id": {
            "type": "integer",
            "title": "Recipe Id"
          },
          "recipe_name": {
            "type": "string",
            "title": "Recipe Name"
          },
          "similarity_score": {
            "type": "number",
            "title": "Similarity Score"
          },
          "ingredients": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Ingredients"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "ingredient_match_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ingredient Match Score"
          },
          "combined_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Combined Score"
          },
          "matched_ingredients": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Matched Ingredients"
          },
          "missing_ingredients": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Missing Ingredients"
          }
        },
        "type": "object",
        "required": [
          "recipe_id",
          "recipe_name",
          "similarity_score",
          "ingredients",
          "description"
        ],
        "title": "RecipeSearchResult",
        "description": "Response model for recipe search results"
      },
      "RemoveItemsRequest": {
        "properties": {
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "User ID"
          },
          "item_names": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Item Names",
            "description": "Names of items to remove"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "item_names"
        ],
        "title": "RemoveItemsRequest"
      },
      "SaveItemsRequest": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DetectedItem"
            },
            "type": "array",
            "title": "Items"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "default": 111
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "SaveItemsRequest"
      },
      "SaveRecipeRequest": {
        "properties": {
          "recipe_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recipe Id",
            "description": "Spoonacular recipe ID if applicable"
          },
          "recipe_title": {
            "type": "string",
            "title": "Recipe Title",
            "description": "Recipe title"
          },
          "recipe_image": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recipe Image",
            "description": "Recipe image URL"
          },
          "recipe_data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Recipe Data",
            "description": "Complete recipe data"
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Recipe source: 'spoonacular', 'generated', 'custom', 'demo'"
          },
          "rating": {
            "type": "string",
            "title": "Rating",
            "description": "Initial rating: 'thumbs_up', 'thumbs_down', 'neutral'",
            "default": "neutral"
          },
          "is_favorite": {
            "type": "boolean",
            "title": "Is Favorite",
            "description": "Whether this recipe is marked as favorite",
            "default": false
          },
          "is_demo": {
            "type": "boolean",
            "title": "Is Demo",
            "description": "Whether this is a demo recipe",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "recipe_title",
          "recipe_data",
          "source"
        ],
        "title": "SaveRecipeRequest",
        "description": "Request model for saving a recipe"
      },
      "ScanRequest": {
        "properties": {
          "image_data": {
            "type": "string",
            "title": "Image Data"
          },
          "mime_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mime Type"
          }
        },
        "type": "object",
        "required": [
          "image_data"
        ],
        "title": "ScanRequest"
      },
      "SemanticSearchRequest": {
        "properties": {
          "query": {
            "type": "string",
            "maxLength": 500,
            "minLength": 1,
            "title": "Query",
            "description": "Search query text"
          },
          "limit": {
            "type": "integer",
            "maximum": 50.0,
            "minimum": 1.0,
            "title": "Limit",
            "description": "Maximum number of results",
            "default": 10
          },
          "similarity_threshold": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Similarity Threshold",
            "description": "Minimum similarity score",
            "default": 0.3
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "SemanticSearchRequest",
        "description": "Request model for semantic search"
      },
      "ShoppingListItem": {
        "properties": {
          "item_name": {
            "type": "string",
            "title": "Item Name",
            "description": "Name of the item"
          },
          "quantity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity",
            "description": "Quantity needed"
          },
          "unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit",
            "description": "Unit of measurement"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category",
            "description": "Category of the item"
          },
          "recipe_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recipe Name",
            "description": "Associated recipe"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes"
          },
          "is_checked": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Checked",
            "description": "Whether item is checked off",
            "default": false
          },
          "priority": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority",
            "description": "Priority level (0=normal, 1=high, 2=urgent)",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "item_name"
        ],
        "title": "ShoppingListItem"
      },
      "Unit": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "category": {
            "type": "string",
            "title": "Category"
          },
          "to_base_factor": {
            "type": "number",
            "title": "To Base Factor"
          },
          "is_metric": {
            "type": "boolean",
            "title": "Is Metric",
            "default": true
          },
          "display_order": {
            "type": "integer",
            "title": "Display Order",
            "default": 999
          }
        },
        "type": "object",
        "required": [
          "id",
          "label",
          "category",
          "to_base_factor"
        ],
        "title": "Unit"
      },
      "UnitConversion": {
        "properties": {
          "from_unit": {
            "type": "string",
            "title": "From Unit"
          },
          "to_unit": {
            "type": "string",
            "title": "To Unit"
          },
          "factor": {
            "type": "number",
            "title": "Factor"
          },
          "convertible": {
            "type": "boolean",
            "title": "Convertible"
          }
        },
        "type": "object",
        "required": [
          "from_unit",
          "to_unit",
          "factor",
          "convertible"
        ],
        "title": "UnitConversion"
      },
      "UnitValidationRequest": {
        "properties": {
          "item_name": {
            "type": "string",
            "title": "Item Name"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "quantity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity"
          }
        },
        "type": "object",
        "required": [
          "item_name",
          "unit"
        ],
        "title": "UnitValidationRequest",
        "description": "Request to validate a unit for an item."
      },
      "UnitValidationResponse": {
        "properties": {
          "is_valid": {
            "type": "boolean",
            "title": "Is Valid"
          },
          "current_unit": {
            "type": "string",
            "title": "Current Unit"
          },
          "suggested_unit": {
            "type": "string",
            "title": "Suggested Unit"
          },
          "suggested_units": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Suggested Units"
          },
          "category": {
            "type": "string",
            "title": "Category"
          },
          "reason": {
            "type": "string",
            "title": "Reason"
          },
          "severity": {
            "type": "string",
            "title": "Severity"
          }
        },
        "type": "object",
        "required": [
          "is_valid",
          "current_unit",
          "suggested_unit",
          "suggested_units",
          "category",
          "reason",
          "severity"
        ],
        "title": "UnitValidationResponse",
        "description": "Response with unit validation result."
      },
      "UpdateItemRequest": {
        "properties": {
          "is_checked": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Checked",
            "description": "Update checked status"
          },
          "quantity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity",
            "description": "Update quantity"
          },
          "unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit",
            "description": "Update unit"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Update notes"
          },
          "priority": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority",
            "description": "Update priority"
          }
        },
        "type": "object",
        "title": "UpdateItemRequest"
      },
      "UpdateRatingRequest": {
        "properties": {
          "rating": {
            "type": "string",
            "title": "Rating",
            "description": "New rating: 'thumbs_up', 'thumbs_down', 'neutral'"
          }
        },
        "type": "object",
        "required": [
          "rating"
        ],
        "title": "UpdateRatingRequest",
        "description": "Request model for updating recipe rating"
      },
      "UserPantryItem": {
        "properties": {
          "user_id": {
            "type": "integer",
            "title": "User Id"
          },
          "user_name": {
            "type": "string",
            "title": "User Name"
          },
          "pantry_id": {
            "type": "integer",
            "title": "Pantry Id"
          },
          "pantry_item_id": {
            "type": "integer",
            "title": "Pantry Item Id"
          },
          "quantity": {
            "type": "number",
            "title": "Quantity"
          },
          "unit_of_measurement": {
            "type": "string",
            "title": "Unit Of Measurement"
          },
          "expiration_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiration Date"
          },
          "unit_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit Price"
          },
          "total_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Price"
          },
          "pantry_item_created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pantry Item Created At"
          },
          "used_quantity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Used Quantity"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          },
          "product_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Id"
          },
          "product_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Name"
          },
          "brand_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand Name"
          },
          "food_category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Food Category"
          },
          "upc_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Upc Code"
          },
          "product_created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Created At"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "user_name",
          "pantry_id",
          "pantry_item_id",
          "quantity",
          "unit_of_measurement",
          "expiration_date",
          "unit_price",
          "total_price",
          "pantry_item_created_at",
          "used_quantity",
          "status",
          "product_id",
          "product_name",
          "brand_name",
          "food_category",
          "upc_code",
          "product_created_at"
        ],
        "title": "UserPantryItem"
      },
      "UserPreferences": {
        "properties": {
          "allergens": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Allergens",
            "default": []
          },
          "dietary_restrictions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Dietary Restrictions",
            "default": []
          },
          "cuisine_preferences": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Cuisine Preferences",
            "default": []
          },
          "household_size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Household Size",
            "default": 1
          }
        },
        "type": "object",
        "title": "UserPreferences"
      },
      "UserProfilePreference": {
        "properties": {
          "household_size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Household Size"
          },
          "dietary_preference": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dietary Preference"
          },
          "allergens": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allergens"
          },
          "cuisine_preference": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cuisine Preference"
          },
          "preference_created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preference Created At"
          }
        },
        "type": "object",
        "title": "UserProfilePreference"
      },
      "UserProfileResponse": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "first_name": {
            "type": "string",
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "title": "Last Name"
          },
          "is_admin": {
            "type": "boolean",
            "title": "Is Admin",
            "default": false
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "user_created_at": {
            "type": "string",
            "format": "date-time",
            "title": "User Created At"
          },
          "user_updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "User Updated At"
          },
          "password_hash": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password Hash"
          },
          "role": {
            "type": "string",
            "title": "Role"
          },
          "api_key_enc": {
            "type": "string",
            "title": "Api Key Enc"
          },
          "preferences": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserProfilePreference"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "email",
          "first_name",
          "last_name",
          "id",
          "user_created_at",
          "user_updated_at",
          "role",
          "api_key_enc"
        ],
        "title": "UserProfileResponse"
      },
      "UserResponse": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "first_name": {
            "type": "string",
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "title": "Last Name"
          },
          "is_admin": {
            "type": "boolean",
            "title": "Is Admin",
            "default": false
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "numeric_user_id": {
            "type": "integer",
            "title": "Numeric User Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "email",
          "first_name",
          "last_name",
          "id",
          "numeric_user_id",
          "created_at",
          "updated_at"
        ],
        "title": "UserResponse"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token authentication"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key authentication for external services"
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "detail": {
                  "type": "string",
                  "example": "Invalid request parameters"
                },
                "error_code": {
                  "type": "string",
                  "example": "INVALID_REQUEST"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "required": [
                "detail"
              ]
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "detail": {
                  "type": "string",
                  "example": "Authentication required"
                },
                "error_code": {
                  "type": "string",
                  "example": "UNAUTHORIZED"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "required": [
                "detail"
              ]
            }
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "detail": {
                  "type": "string",
                  "example": "Insufficient permissions"
                },
                "error_code": {
                  "type": "string",
                  "example": "FORBIDDEN"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "required": [
                "detail"
              ]
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "detail": {
                  "type": "string",
                  "example": "Resource not found"
                },
                "error_code": {
                  "type": "string",
                  "example": "NOT_FOUND"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "required": [
                "detail"
              ]
            }
          }
        }
      },
      "422": {
        "description": "Validation Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "detail": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "loc": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "msg": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "loc",
                      "msg",
                      "type"
                    ]
                  }
                },
                "error_code": {
                  "type": "string",
                  "example": "VALIDATION_ERROR"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "required": [
                "detail"
              ]
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "detail": {
                  "type": "string",
                  "example": "Internal server error"
                },
                "error_code": {
                  "type": "string",
                  "example": "INTERNAL_ERROR"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                },
                "incident_id": {
                  "type": "string",
                  "example": "inc_123456"
                }
              },
              "required": [
                "detail"
              ]
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "health",
      "description": "Health check and system monitoring endpoints"
    },
    {
      "name": "users",
      "description": "User management and authentication operations"
    },
    {
      "name": "pantry",
      "description": "Pantry management and inventory tracking"
    },
    {
      "name": "recipes",
      "description": "Recipe management and AI-powered recommendations"
    },
    {
      "name": "ocr",
      "description": "Optical Character Recognition for receipt processing"
    },
    {
      "name": "images",
      "description": "Image processing and upload operations"
    },
    {
      "name": "crewai",
      "description": "AI agent operations and task execution"
    },
    {
      "name": "monitoring",
      "description": "Application monitoring and observability endpoints"
    },
    {
      "name": "admin",
      "description": "Administrative operations and system management"
    }
  ],
  "externalDocs": {
    "description": "PrepSense GitHub Repository",
    "url": "https://github.com/dankimjw/PrepSense"
  },
  "x-api-version": "1.4.0",
  "x-api-stability": "stable",
  "x-contract-testing": {
    "enabled": true,
    "tools": [
      "schemathesis",
      "spectral"
    ],
    "validation_rules": [
      "spectral:.spectral.yml"
    ]
  }
}