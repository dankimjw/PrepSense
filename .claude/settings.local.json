{
  "permissions": {
    "allow": [
      "Bash(git pull:*)",
      "Bash(chmod:*)",
      "Bash(mv:*)",
      "Bash(cp:*)",
      "Bash(cat:*)",
      "Bash(venv/bin/pip install:*)",
      "Bash(venv/bin/pip:*)",
      "Bash(git checkout:*)",
      "Bash(pip install:*)",
      "Bash(python3 -m pip install:*)",
      "Bash(ls:*)",
      "Bash(source:*)",
      "Bash(git push:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(curl:*)",
      "Bash(python3:*)",
      "Bash(python:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(git grep:*)",
      "Bash(npm install:*)",
      "Bash(git merge:*)",
      "Bash(mkdir:*)",
      "Bash(pip3 install:*)",
      "Bash(export GOOGLE_APPLICATION_CREDENTIALS=\"/Users/danielkim/_Capstone/PrepSense/config/adsp-34002-on02-prep-sense-ef1111b0833b.json\")",
      "Bash(rm:*)",
      "Bash(true)",
      "Bash(git branch:*)",
      "Bash(git remote:*)",
      "Bash(pkill:*)",
      "Bash(pyenv local:*)",
      "Bash(kill:*)",
      "Bash(/Users/danielkim/.pyenv/versions/3.9.13/bin/python test_backend.py)",
      "Bash(/Users/danielkim/.pyenv/versions/3.9.13/bin/pip install python-dotenv)",
      "Bash(/Users/danielkim/.pyenv/versions/3.9.13/bin/python -c \"\nimport asyncio\nfrom backend_gateway.services.crew_ai_service import CrewAIService\n\nasync def test():\n    service = CrewAIService()\n    result = await service._fallback_process_message(111, ''What can I make for dinner?'')\n    print(''Keys in result:'', list(result.keys()))\n    print(''user_preferences present:'', ''user_preferences'' in result)\n    if ''user_preferences'' in result:\n        print(''user_preferences value:'', result[''user_preferences''])\n\nasyncio.run(test())\n\")",
      "Bash(/Users/danielkim/.pyenv/versions/3.9.13/bin/python -m uvicorn app:app --reload --port 8001)",
      "Bash(/Users/danielkim/.pyenv/versions/3.9.13/bin/pip install crewai==0.5.0)",
      "Bash(/Users/danielkim/.pyenv/shims/python scripts/query_chat_recipes.py)",
      "Bash(npm run ios:*)",
      "Bash(npx react-native run-ios:*)",
      "Bash(npx expo:*)",
      "Bash(rg:*)",
      "Bash(git config:*)",
      "Bash(./rewrite-commits.sh)",
      "Bash(git reset:*)",
      "Bash(npm start)",
      "Bash(git rm:*)",
      "Bash(gh pr create:*)",
      "Bash(gh pr view:*)",
      "Bash(git fetch:*)",
      "Bash(git stash push:*)",
      "Bash(git stash:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run:*)",
      "Bash(npx tsc:*)",
      "Bash(bq ls:*)",
      "Bash(gcloud config set:*)",
      "Bash(bq mk:*)",
      "Bash(bq cp:*)",
      "Bash(bq query:*)",
      "Bash(gh pr list:*)",
      "Bash(gh pr close:*)",
      "Bash(gcloud services list:*)",
      "Bash(gcloud sql instances:*)",
      "Bash(brew install:*)",
      "Bash(gcloud auth:*)",
      "Bash(export:*)",
      "Bash(gcloud sql connect:*)",
      "Bash(uvicorn:*)",
      "Bash(./run_ios.py)",
      "Bash(PGPASSWORD=***REMOVED*** psql -h ***REMOVED*** -U postgres -d prepsense -c \"CREATE TABLE IF NOT EXISTS products (\n    product_id SERIAL PRIMARY KEY,\n    pantry_item_id INTEGER REFERENCES pantry_items(pantry_item_id) ON DELETE CASCADE,\n    product_name VARCHAR(255) NOT NULL,\n    brand_name VARCHAR(255),\n    category VARCHAR(100) DEFAULT ''Uncategorized'',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\")",
      "Bash(PGPASSWORD=***REMOVED*** psql:*)",
      "Bash(time curl:*)",
      "Bash(psql:*)",
      "Bash(gh api:*)",
      "Bash(git filter-repo:*)",
      "Bash(gcloud sql users list:*)",
      "Bash(gcloud sql users create:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(claude mcp:*)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(./scripts/setup_mcp_servers.sh:*)",
      "Bash(npm bin:*)",
      "Bash(npm root:*)",
      "Bash(git worktree:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $worktree ===\")",
      "Bash(done)",
      "Bash(npx concurrently:*)",
      "Bash(/Users/danielkim/_Capstone/PrepSense/scripts/force_mcp_reload.sh:*)",
      "Bash(mcp-server-filesystem:*)",
      "mcp__memory__read_graph",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(claude refresh)",
      "Bash(./quick_check.sh:*)",
      "Bash(./setup_claude_md_symlinks.sh:*)",
      "Bash(./setup_worktree_collaboration.sh:*)",
      "Bash(./check_collaboration_status.sh:*)",
      "Bash(ln:*)",
      "Bash(echo $EXPO_PUBLIC_API_BASE_URL)",
      "Bash(/Users/danielkim/_Capstone/PrepSense/scripts/fix_mcp_filesystem.sh:*)",
      "Bash(/Users/danielkim/_Capstone/PrepSense/scripts/test_mcp_filesystem.sh:*)",
      "Bash(git -C ../PrepSense-worktrees/bugfix status -sb)",
      "Bash(git -C ../PrepSense-worktrees/testzone status -sb)",
      "Bash(../PrepSense-worktrees/bugfix/venv/bin/pip install -r requirements.txt)",
      "Bash(.claude/fix_worktree_symlinks.sh:*)",
      "Bash(git restore:*)",
      "Bash(diff:*)",
      "Bash(PYTHONPATH=. python backend_gateway/tests/crewai/test_models.py)",
      "Bash(PYTHONPATH=. python backend_gateway/tests/crewai/test_cache_manager.py)",
      "Bash(pip show:*)",
      "Bash(PYTHONPATH=. python -m pytest tests/crewai/test_background_flows.py -v)",
      "Bash(PYTHONPATH=. python -m pytest tests/crewai/test_background_flows.py::TestPantryAnalysisFlow::test_flow_initialization -v)",
      "Bash(PYTHONPATH=. python tests/crewai/test_background_flows.py)",
      "Bash(PYTHONPATH=/Users/danielkim/_Capstone/PrepSense python tests/crewai/test_background_flows.py)",
      "Bash(PYTHONPATH=/Users/danielkim/_Capstone/PrepSense python backend_gateway/tests/crewai/test_background_flows.py)",
      "Bash(PYTHONPATH=. python -c \"import backend_gateway.crewai.models; print(''Models imported successfully'')\")",
      "Bash(PYTHONPATH=. python -c \"from crewai.models import PantryArtifact; print(''Models imported successfully'')\")",
      "Bash(PYTHONPATH=. python -c \"from backend_gateway.crewai.models import PantryArtifact; print(''Models imported successfully'')\")",
      "Bash(PYTHONPATH=. python -c \"from backend_gateway.crewai.models import PantryArtifact; print(''Models imported successfully'')\")",
      "Bash(PYTHONPATH=/Users/danielkim/_Capstone/PrepSense python -c \"from backend_gateway.crewai.models import PantryArtifact; print(''Models imported successfully'')\")",
      "Bash(PYTHONPATH=. python:*)",
      "Bash(echo \"‚úÖ **Pull Request Created Successfully!**\n\n**PR #100**: feat: CrewAI TDD Foundation - Replace Fake System with Real Implementation\n**URL**: https://github.com/dankimjw/PrepSense/pull/100\n\n## üéØ What Was Accomplished\n\n### TDD Implementation Complete ‚úÖ\n- **64+ comprehensive tests** written BEFORE any implementation (true TDD)\n- **Core data models** implemented to make failing tests pass\n- **Redis cache manager** with full artifact persistence  \n- **Supporting infrastructure** for embeddings, ML, and events\n\n### Key Discovery üîç\n- **Fake CrewAI System Identified**: Current system doesn''t use CrewAI library at all\n- **Real Integration Ready**: Foundation built for actual CrewAI v0.5.0 implementation\n\n### Components Built\n1. **Data Models**: PantryArtifact, PreferenceArtifact, RecipeArtifact with JSON serialization\n2. **Cache Manager**: Redis-based persistence with TTL and freshness validation\n3. **Test Suite**: 64+ tests covering all functionality\n4. **Performance Tracking**: Built-in 3-second response time targets\n\n### Architecture\n```\nUser Action ‚Üí Event Trigger ‚Üí Background Flow ‚Üí Artifact Cache ‚Üí Real-time Crew\n```\n\n## üìã Ready for Next Phase\nFoundation complete for implementing actual CrewAI flows using basic CrewAI classes (Crew, Agent, Task) to replace the fake system with real functionality.\n\n**TDD Success**: Tests written first, implementation follows incrementally! üéâ\")",
      "Bash(gh pr diff:*)",
      "Bash(git revert:*)",
      "Bash(gh pr checks:*)",
      "Bash(venv/bin/python:*)",
      "Bash(xxd:*)",
      "mcp__mobile__mobile_click_on_screen_at_coordinates",
      "mcp__mobile__mobile_take_screenshot",
      "mcp__mobile__swipe_on_screen",
      "mcp__mobile__mobile_save_screenshot",
      "mcp__mobile__mobile_type_keys",
      "Bash(pytest:*)",
      "mcp__mobile__mobile_list_available_devices",
      "mcp__memory__search_nodes",
      "mcp__memory__create_entities",
      "mcp__mobile__mobile_use_default_device",
      "Bash(./run_ocr_test.sh:*)",
      "Bash(npm test:*)",
      "Bash(bash:*)",
      "Bash(git diff:*)",
      "Bash(unzip:*)",
      "Bash(/Users/danielkim/_Capstone/PrepSense/quick_check.sh)",
      "Bash(./fix_watchman.sh)",
      "Bash(# Copy query utilities\ncp /Users/danielkim/_Capstone/PrepSense/query_usda.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/scripts/test_pantry_query.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\n\n# Copy migration scripts\ncp /Users/danielkim/_Capstone/PrepSense/apply_semantic_search_migration.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/run_user_recipes_migration.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/scripts/run_external_recipe_migration.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/scripts/run_missing_columns_migration.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\n\necho \"\"Copied query and migration scripts\"\")",
      "Bash(# Copy data import scripts\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/scripts/import_usda_data_fixed.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/scripts/import_usda_data.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/scripts/import_usda_unit_mappings.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/scripts/populate_embeddings.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/scripts/populate_environmental_data.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/populate_embeddings_standalone.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/check_embedding_status.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\n\necho \"\"Copied data import scripts\"\")",
      "Bash(# Copy setup scripts\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/scripts/setup_cloud_sql_postgres.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/scripts/configure_database.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/setup_usda_tables.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/scripts/check_database_schema.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\n\necho \"\"Copied setup scripts\"\")",
      "Bash(# Copy test scripts\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/test_usda_api.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/test_usda_queries.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/test_usda_simple.py \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/\"\"\n\necho \"\"Copied test scripts\"\")",
      "Bash(# Create SQL subdirectories\nmkdir -p \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/SQL/migrations\"\"\nmkdir -p \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/SQL/schema\"\"\nmkdir -p \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/SQL/tables\"\"\n\n# Copy SQL files\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/migrations/*.sql \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/SQL/migrations/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/scripts/schema_postgres.sql \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/SQL/schema/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/scripts/create_*.sql \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/SQL/tables/\"\"\ncp /Users/danielkim/_Capstone/PrepSense/backend_gateway/scripts/add_*.sql \"\"/Users/danielkim/_Capstone/PrepSense/Database Scripts/SQL/tables/\"\"\n\necho \"\"Copied SQL files\"\")",
      "Bash(tree:*)",
      "Bash(echo \"POSTGRES_HOST=$POSTGRES_HOST\")",
      "mcp__mobile__mobile_launch_app",
      "mcp__mobile__mobile_list_elements_on_screen",
      "mcp__mobile__mobile_press_button",
      "mcp__mobile__mobile_list_apps",
      "Bash(-H \"Content-Type: application/json\")"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "filesystem",
    "memory",
    "sequential-thinking",
    "context7"
  ]
}